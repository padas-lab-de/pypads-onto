fragments:
  default_model:
    !!python/pPath '__init__':
      hooks: pypads_init
    !!python/rSeg '(fit|.fit_predict|fit_transform)$':
      hooks: pypads_fit
    !!python/rSeg '(fit_predict|predict|score)$':
      hooks: pypads_predict
    !!python/rSeg '(fit_transform|transform)$':
      hooks: pypads_transform
mappings:
  !!python/pPath sklearn:
    data:
      "@rdf":
        mapped_by: "http://www.padre-lab.eu/PyPadsInjection"
        defined_in: "http://www.padre-lab.eu/onto/Sklearn#0.19.1"
    !!python/pPath base.BaseEstimator:
      ;default_model: ~
      __init__:
        hooks: "pypads_estimator"
      data:
        "@rdf":
          in_context: "http://www.padre-lab.eu/onto/Estimator"
    !!python/rSeg (RegressorMixin|ClassifierMixin|DensityMixin):
      !!python/pPath score:
        hooks: "pypads_metric"
    !!python/pPath metrics.classification:
      !!python/rSeg .*:
        hooks: "pypads_metric"
        data:
          "@rdf":
            in_context: "http://www.padre-lab.eu/onto/Metric"
    !!python/pPath datasets.base:
      !!python/rSeg (?!^load_data$)load_.*:
        hooks: "pypads_dataset"
        data:
          "@rdf":
            in_context: "http://www.padre-lab.eu/onto/Dataset"
    !!python/pPath model_selection:
      !!python/pPath _search.BaseSearchCV:
        !!python/pPath fit:
          hooks: ["pypads_param_search", "pypads_fit"]
          data:
            "@rdf":
              in_context: "http://www.padre-lab.eu/onto/ParameterSearch"
        !!python/pPath predict:
          hooks: "pypads_predict"
      !!python/pPath _validation._fit_and_score:
        hooks: ["pypads_param_search_exec"]
        data:
          "@rdf":
            in_context: "http://www.padre-lab.eu/onto/ParameterSearchExecution"
    !!python/pPath model_selection._split:
      !!python/pPath BaseCrossValidator:
        !!python/pPath split:
          hooks: ["pypads_split"]
          data:
            "@rdf":
              in_context: "http://www.padre-lab.eu/onto/Splitting"
      !!python/pPath BaseShuffleSplit.split:
        hooks: ["pypads_split"]
        data:
          "@rdf":
            in_context: "http://www.padre-lab.eu/onto/Splitting"
    :calibration.CalibratedClassifierCV:
      ;default_model: null
      data:
        estimator:
          implements: "padre:ProbabilityCalibration"
          description: ''
          name: probability calibration with cross validation
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: 'The classifier whose output decision function needs to
                be calibrated to offer more accurate prediction probability outputs. '
                kind_of_value: '{object, None}'
                name: base_estimator
                optional: 'False'
                path: base_estimator
              - default_value: '''sigmoid'''
                description: The method to use for calibration.
                kind_of_value: '{''sigmoid'', ''isotonic''}'
                name: calibration_method
                optional: 'False'
                path: method
              - default_value: '3'
                description: Determines the cross-validation splitting strategy.
                kind_of_value: '{integer, object (cross-validation generator),  iterable
                yielding train and tests splits, None, ''prefit'''
                name: cross_validation
                optional: 'True'
                path: cv
            optimisation_parameters: []
    :cluster.affinity_propagation_.AffinityPropagation:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: affinity propagation clustering
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '0.5'
                description: Damping factor is the extent to which the current value
                  is maintained relative to incoming values (weighted 1 - damping).
                  This in order to avoid numerical oscillations when updating these
                  values (messages).
                kind_of_value: float (between 0.5 and 1)
                name: damping
                optional: 'True'
                path: damping
              - default_value: 'True'
                description: Make a copy of input data.
                kind_of_value: boolean
                name: copy
                optional: 'True'
                path: copy
              - default_value: None
                description: Preferences for each point - points with larger values
                  of preferences are more likely to be chosen as exemplars. The number
                  of exemplars, ie of clusters, is influenced by the input preferences
                  value. If the preferences are not passed as arguments, they will be
                  set to the median of the input similarities.
                kind_of_value: '{array-like, shape (n_samples,), float, None}'
                name: preference
                optional: 'True'
                path: preference
              - default_value: '''euclidean'''
                description: Which affinity to use.
                kind_of_value: '{''precomputed'', ''euclidean''}'''
                name: affinity
                optional: 'True'
                path: affinity
              - default_value: 'False'
                description: Whether to be verbose.
                kind_of_value: boolean
                name: verbose
                optional: 'True'
                path: verbose
            optimisation_parameters:
              - default_value: '200'
                description: Maximum number of iterations over the complete dataset
                  before stopping independently of any early stopping criterion heuristics.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
              - default_value: '15'
                description: Number of iterations with no change in the number of estimated
                  clusters that stops the convergence.
                kind_of_value: integer
                name: convergence_iteration
                optional: 'True'
                path: convergence_iter
    :cluster.bicluster.SpectralBiclustering:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: spectral biclustering
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '3'
                description: The number of biclusters to find.
                kind_of_value: integer
                name: num_clusters
                optional: 'True'
                path: n_clusters
              - default_value: '''bistochastic'''
                description: Method of normalizing and converting singular vectors into
                  biclusters.
                kind_of_value: '{''scale'', ''bistochastic'', ''log''}'
                name: method
                optional: 'True'
                path: method
              - default_value: '6'
                description: Number of singular vectors to check.
                kind_of_value: integer
                name: num_components
                optional: 'True'
                path: n_components
              - default_value: '3'
                description: Number of best singular vectors to which to project the
                  data for clustering.
                kind_of_value: integer
                name: num_best
                optional: 'True'
                path: n_best
              - default_value: '''randomized'''
                description: Selects the algorithm for finding singular vectors.
                kind_of_value: '{''randomized'', ''arpack''}'
                name: svd_method
                optional: 'True'
                path: svd_method
              - default_value: None
                description: Number of vectors to use in calculating the SVD.
                kind_of_value: '{integer, None}'
                name: num_svd_vecs
                optional: 'True'
                path: n_svd_vecs
              - default_value: 'False'
                description: Whether to use mini-batch k-means, which is faster but
                  may get different results.
                kind_of_value: boolean
                name: mini_batch
                optional: 'True'
                path: mini_batch
              - default_value: '''k-means++'''
                description: Method for initialization of k-means algorithm.
                kind_of_value: '{''k-means++'', ''random'',  array of shape (n_clusters,
                n_features)}'
                name: initialization_method
                optional: 'False'
                path: init
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '10'
                description: Number of time the k-means algorithm will be run with different
                  centroid seeds.
                kind_of_value: integer
                name: num_initialization
                optional: 'False'
                path: n_init
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'False'
                path: n_jobs
    :cluster.bicluster.SpectralCoclustering:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: spectral co-clustering
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '3'
                description: The number of biclusters to find.
                kind_of_value: integer
                name: num_clusters
                optional: 'True'
                path: n_clusters
              - default_value: '''randomized'''
                description: Selects the algorithm for finding singular vectors.
                kind_of_value: '{''randomized'', ''arpack''}'
                name: svd_method
                optional: 'True'
                path: svd_method
              - default_value: None
                description: Number of vectors to use in calculating the SVD.
                kind_of_value: '{integer, None}'
                name: num_svd_vecs
                optional: 'True'
                path: n_svd_vecs
              - default_value: 'False'
                description: Whether to use mini-batch k-means, which is faster but
                  may get different results.
                kind_of_value: boolean
                name: mini_batch
                optional: 'True'
                path: mini_batch
              - default_value: '''k-means++'''
                description: Method for initialization of k-means algorithm.
                kind_of_value: '{''k-means++'', ''random'',  array of shape (n_clusters,
                n_features)}'
                name: initialization_method
                optional: 'False'
                path: init
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '10'
                description: Number of time the k-means algorithm will be run with different
                  centroid seeds.
                kind_of_value: integer
                name: num_initialization
                optional: 'False'
                path: n_init
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'False'
                path: n_jobs
    :cluster.birch.Birch:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: birch clustering
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '0.5'
                description: The radius of the subcluster obtained by merging a new
                  sample and the closest subcluster should be lesser than the threshold.
                  Otherwise a new subcluster is started. Setting this value to be very
                  low promotes splitting and vice-versa.
                kind_of_value: float
                name: threshold
                optional: 'False'
                path: threshold
              - default_value: '50'
                description: Maximum number of CF subclusters in each node. If a new
                  samples enters such that the number of subclusters exceed the branching_factor
                  then that node is split into two nodes with the subclusters redistributed
                  in each. The parent subcluster of that node is removed and two new
                  subclusters are added as parents of the 2 split nodes.
                kind_of_value: integer
                name: branching_factor
                optional: 'False'
                path: branching_factor
              - default_value: '3'
                description: Number of clusters after the final clustering step, which
                  treats the subclusters from the leaves as new samples.
                kind_of_value: '{integer, instance of sklearn.cluster model, None}'
                name: num_clusters
                optional: 'False'
                path: n_clusters
              - default_value: 'True'
                description: Whether or not to compute labels for each fit.
                kind_of_value: boolean
                name: compute_labels
                optional: 'False'
                path: compute_labels
              - default_value: 'True'
                description: Whether or not to make a copy of the given data. If set
                  to False, the initial data will be overwritten.
                kind_of_value: boolean
                name: copy
                optional: 'False'
                path: copy
            optimisation_parameters: []
    :cluster.dbscan_.DBSCAN:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: DBSCAN
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '0.5'
                description: The maximum distance between two samples for them to be
                  considered as in the same neighborhood.
                kind_of_value: float
                name: eps
                optional: 'True'
                path: eps
              - default_value: '5'
                description: The number of samples (or total weight) in a neighborhood
                  for a point to be considered as a core point. This includes the point
                  itself.
                kind_of_value: integer
                name: min_samples
                optional: 'True'
                path: min_samples
              - default_value: '''euclidean'''
                description: The metric to use when calculating distance between instances
                  in a feature array.
                kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
                ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
                ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'',
                ''matching'', ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'',
                ''sokalmichener'', ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable
                that should take two arrays as input and return one value indicating
                the distance between them}'
                name: distance_metric
                optional: 'False'
                path: metric
              - default_value: None
                description: Additional keyword arguments for the metric function.
                kind_of_value: dict
                name: metric_parameters
                optional: 'True'
                path: metric_params
              - default_value: '''auto'''
                description: The algorithm to be used by the NearestNeighbors module
                  to compute pointwise distances and find nearest neighbors.
                kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
                name: algorithm
                optional: 'True'
                path: algorithm
              - default_value: '30'
                description: Leaf size passed to BallTree or KDTree. This can affect
                  the speed of the construction and query, as well as the memory required
                  to store the tree. The optimal value depends on the nature of the
                  problem.
                kind_of_value: integer
                name: leaf_size
                optional: 'True'
                path: leaf_size
              - default_value: None
                description: The power of the Minkowski metric to be used to calculate
                  distance between points.
                kind_of_value: '{integer, None}'
                name: minkowski_parameter
                optional: 'True'
                path: p
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :cluster.hierarchical.AgglomerativeClustering:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: agglomerative clustering
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '2'
                description: The number of clusters to find.
                kind_of_value: integer
                name: num_clusters
                optional: 'True'
                path: n_clusters
              - default_value: '''euclidean'''
                description: Which affinity to use.
                kind_of_value: '{''precomputed'', ''euclidean'', ''l1'', ''l2'', ''manhattan'',
                ''cosine''}'
                name: affinity
                optional: 'False'
                path: affinity
              - default_value: None
                description: Used to cache the output of the computation of the tree.
                kind_of_value: '{None, object with the joblib.Memory interface, path
                to cashing directory}'
                name: memory
                optional: 'True'
                path: memory
              - default_value: None
                description: Connectivity matrix. Defines for each sample the neighboring
                  samples following a given structure of the data. This can be a connectivity
                  matrix itself or a callable that transforms the data into a connectivity
                  matrix.
                kind_of_value: '{array-like, callable, None}'
                name: connectivity_matrix
                optional: 'True'
                path: connectivity
              - default_value: '''auto'''
                description: Stop early the construction of the tree at num_clusters.
                  This is useful to decrease computation time if the number of clusters
                  is not small compared to the number of samples. This option is useful
                  only when specifying a connectivity matrix. Note also that when varying
                  the number of clusters and using caching, it may be advantageous to
                  compute the full tree.
                kind_of_value: '{boolean, ''auto''}'
                name: compute_full_tree
                optional: 'True'
                path: compute_full_tree
              - default_value: '''ward'''
                description: Which linkage criterion to use. The linkage criterion determines
                  which distance to use between sets of observation. The algorithm will
                  merge the pairs of cluster that minimize this criterion.
                kind_of_value: '{''ward'', ''complete'', ''average''}'
                name: linkage_criterion
                optional: 'True'
                path: linkage
              - default_value: <function mean>
                description: This combines the values of agglomerated features into
                  a single value, and should accept an array of shape [M, N] and the
                  keyword argument axis=1, and reduce it to an array of size [M].
                kind_of_value: callable
                name: pooling_function
                optional: 'False'
                path: pooling_func
            optimisation_parameters: []
    :cluster.hierarchical.FeatureAgglomeration:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: feature agglomerative clustering
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '2'
                description: The number of clusters to find.
                kind_of_value: integer
                name: num_clusters
                optional: 'True'
                path: n_clusters
              - default_value: '''euclidean'''
                description: Which affinity to use.
                kind_of_value: '{''precomputed'', ''euclidean'', ''l1'', ''l2'', ''manhattan'',
                ''cosine''}'''
                name: affinity
                optional: 'False'
                path: affinity
              - default_value: None
                description: Used to cache the output of the computation of the tree.
                kind_of_value: '{None, object with the joblib.Memory interface, path
                to cashing directory}'
                name: memory
                optional: 'True'
                path: memory
              - default_value: None
                description: Connectivity matrix. Defines for each sample the neighboring
                  samples following a given structure of the data. This can be a connectivity
                  matrix itself or a callable that transforms the data into a connectivity
                  matrix.
                kind_of_value: '{array-like, callable, None}'
                name: connectivity_matrix
                optional: 'True'
                path: connectivity
              - default_value: '''auto'''
                description: Stop early the construction of the tree at num_clusters.
                  This is useful to decrease computation time if the number of clusters
                  is not small compared to the number of samples. This option is useful
                  only when specifying a connectivity matrix. Note also that when varying
                  the number of clusters and using caching, it may be advantageous to
                  compute the full tree.
                kind_of_value: '{boolean, ''auto''}'
                name: compute_full_tree
                optional: 'True'
                path: compute_full_tree
              - default_value: '''ward'''
                description: Which linkage criterion to use. The linkage criterion determines
                  which distance to use between sets of observation. The algorithm will
                  merge the pairs of cluster that minimize this criterion.
                kind_of_value: '{''ward'', ''complete'', ''average''}'
                name: linkage_criterion
                optional: 'True'
                path: linkage
              - default_value: <function mean>
                description: This combines the values of agglomerated features into
                  a single value, and should accept an array of shape [M, N] and the
                  keyword argument axis=1, and reduce it to an array of size [M].
                kind_of_value: callable
                name: pooling_function
                optional: 'False'
                path: pooling_func
            optimisation_parameters: []
    :cluster.k_means_.KMeans:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: k-means clustering
          other_names:
            - "Lloyd\u2019s algorithm"
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '8'
                description: The number of clusters to form as well as the number of
                  centroids to generate.
                kind_of_value: integer
                name: num_clusters
                optional: 'True'
                path: n_clusters
              - default_value: '''k-means++'''
                description: Method for initialization.
                kind_of_value: '{''k-means++'', ''random'',  array of shape (n_clusters,
                n_features)}'
                name: initialization_method
                optional: 'False'
                path: init
              - default_value: '0.0001'
                description: Relative tolerance with regards to inertia to declare convergence
                kind_of_value: float
                name: tolerance
                optional: 'False'
                path: tol
              - default_value: '0'
                description: Verbosity mode.
                kind_of_value: integer
                name: verbose
                optional: 'False'
                path: verbose
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: 'True'
                description: When pre-computing distances it is more numerically accurate
                  to center the data first. If copy_x is True, then the original data
                  is not modified. If False, the original data is modified, and put
                  back before the function returns, but small numerical differences
                  may be introduced by subtracting and then adding the data mean.
                kind_of_value: boolean
                name: copy_X
                optional: 'True'
                path: copy_x
              - default_value: '''auto'''
                description: K-means algorithm to use.
                kind_of_value: '{''auto'', ''full'', ''elkan''}'
                name: algorithm
                optional: 'False'
                path: algorithm
            optimisation_parameters:
              - default_value: '10'
                description: Number of time the k-means algorithm will be run with different
                  centroid seeds.
                kind_of_value: integer
                name: num_initialization
                optional: 'False'
                path: n_init
              - default_value: '300'
                description: Maximum number of iterations of the k-means algorithm for
                  a single run.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
              - default_value: '''auto'''
                description: "Precompute distances (faster but takes more memory). \u2018\
                auto\u2019 : do not precompute distances if n_samples * n_clusters\
                \ > 12 million. This corresponds to about 100MB overhead per job using\
                \ double precision."
                kind_of_value: '{''auto'', True, False}'
                name: precompute_distances
                optional: 'False'
                path: precompute_distances
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'False'
                path: n_jobs
    :cluster.k_means_.MiniBatchKMeans:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: mini batch k-means clustering
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '8'
                description: The number of clusters to form as well as the number of
                  centroids to generate.
                kind_of_value: integer
                name: num_clusters
                optional: 'True'
                path: n_clusters
              - default_value: '''k-means++'''
                description: Method for initialization.
                kind_of_value: '{''k-means++'', ''random'',  array of shape (n_clusters,
                n_features)}'
                name: initialization_method
                optional: 'False'
                path: init
              - default_value: '100'
                description: Size of the mini batches.
                kind_of_value: integer
                name: batch_size
                optional: 'True'
                path: batch_size
              - default_value: '0'
                description: Verbosity mode.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'True'
                description: Compute label assignment and inertia for the complete dataset
                  once the minibatch optimization has converged in fit.
                kind_of_value: boolean
                name: compute_labels
                optional: 'False'
                path: compute_labels
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '0.0'
                description: Control early stopping based on the relative center changes
                  as measured by a smoothed, variance-normalized of the mean center
                  squared position changes. This early stopping heuristics is closer
                  to the one used for the batch variant of the algorithms but induces
                  a slight computational and memory overhead over the inertia heuristic.
                kind_of_value: float
                name: tolerance
                optional: 'False'
                path: tol
            optimisation_parameters:
              - default_value: '100'
                description: Maximum number of iterations over the complete dataset
                  before stopping independently of any early stopping criterion heuristics.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
              - default_value: '10'
                description: Control early stopping based on the consecutive number
                  of mini batches that does not yield an improvement on the smoothed
                  inertia.
                kind_of_value: integer
                name: max_no_improvement
                optional: 'False'
                path: max_no_improvement
              - default_value: 3*batch size
                description: Number of samples to randomly sample for speeding up the
                  initialization (sometimes at the expense of accuracy).
                kind_of_value: integer
                name: initialization_size
                optional: 'True'
                path: init_size
              - default_value: '3'
                description: Number of random initializations that are tried.
                kind_of_value: integer
                name: num_initialization
                optional: 'False'
                path: n_init
              - default_value: '0.01'
                description: Control the fraction of the maximum number of counts for
                  a center to be reassigned. A higher value means that low count centers
                  are more easily reassigned, which means that the model will take longer
                  to converge, but should converge in a better clustering.
                kind_of_value: float
                name: reassignment_ratio
                optional: 'False'
                path: reassignment_ratio
    :cluster.mean_shift_.MeanShift:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: mean shift clustering with flat kernel
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Bandwidth used in the RBF kernel.
                kind_of_value: '{float, None}'
                name: bandwidth
                optional: 'True'
                path: bandwidth
              - default_value: None
                description: Seeds used to initialize kernels.
                kind_of_value: '{array of shape=[n_samples, n_features], None}'
                name: seeds
                optional: 'True'
                path: seeds
              - default_value: 'False'
                description: If true, initial kernel locations are not locations of
                  all points, but rather the location of the discretized version of
                  points, where points are binned onto a grid whose coarseness corresponds
                  to the bandwidth. Setting this option to True will speed up the algorithm
                  because fewer seeds will be initialized.
                kind_of_value: boolean
                name: bin_seeding
                optional: 'True'
                path: bin_seeding
              - default_value: '1'
                description: To speed up the algorithm, accept only those bins with
                  at least min_bin_freq points as seeds.
                kind_of_value: integer
                name: min_bin_freq
                optional: 'True'
                path: min_bin_freq
              - default_value: 'True'
                description: If true, then all points are clustered, even those orphans
                  that are not within any kernel. Orphans are assigned to the nearest
                  kernel. If false, then orphans are given cluster label -1.
                kind_of_value: boolean
                name: cluster_all
                optional: 'False'
                path: cluster_all
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'False'
                path: n_jobs
    :cluster.spectral.SpectralClustering:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: spectral clustering
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '8'
                description: The dimension of the projection subspace.
                kind_of_value: integer
                name: num_clusters
                optional: 'True'
                path: n_clusters
              - default_value: None
                description: The eigenvalue decomposition strategy to use.
                kind_of_value: '{''lobpcg'', ''arpack'', ''amg'', None]'
                name: eigen_solver
                optional: 'False'
                path: eigen_solver
              - default_value: '10'
                description: Kernel coefficient for rbf, poly, sigmoid, laplacian and
                  chi2 kernels.
                kind_of_value: float
                name: kernel_coefficient
                optional: 'False'
                path: gamma
              - default_value: '''rbf'''
                description: Which affinity to use.
                kind_of_value: '{''nearest_neighbors'', ''precomputed'', ''rbf'', ''sigmoid'',
                ''polynomial'', ''poly'', ''linear'', ''cosine'', array-like, callable}'''
                name: affinity
                optional: 'True'
                path: affinity
              - default_value: '10'
                description: Number of neighbors to use when constructing the affinity
                  matrix using the nearest neighbors method.
                kind_of_value: integer
                name: num_neighbours
                optional: 'True'
                path: n_neighbors
              - default_value: '0.0'
                description: Stopping criterion for eigendecomposition of the Laplacian
                  matrix.
                kind_of_value: float
                name: eigen_tol
                optional: 'True'
                path: eigen_tol
              - default_value: '''kmeans'''
                description: The strategy to use to assign labels in the embedding space.
                  There are two ways to assign labels after the laplacian embedding.
                  k-means can be applied and is a popular choice. But it can also be
                  sensitive to initialization. Discretization is another approach which
                  is less sensitive to random initialization.
                kind_of_value: '{''kmeans'', ''discretize''}'
                name: assign_labels
                optional: 'False'
                path: assign_labels
              - default_value: '3.0'
                description: Degree of the polynomial kernel.
                kind_of_value: float
                name: kernel_degree
                optional: 'False'
                path: degree
              - default_value: '1.0'
                description: Zero coefficient for polynomial and sigmoid kernels.
                kind_of_value: float
                name: zero_coefficient
                optional: 'False'
                path: coef0
              - default_value: None
                description: Additional parameters (keyword arguments) for kernel function
                  passed as callable object.
                kind_of_value: dictionary of string to any
                name: kernel_parameters
                optional: 'True'
                path: kernel_params
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
              - default_value: '10'
                description: Number of time the k-means algorithm will be run with different
                  centroid seeds.
                kind_of_value: integer
                name: num_initialization
                optional: 'True'
                path: n_init
    :covariance.outlier_detection.EllipticEnvelope:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: elliptice envelope
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: 'True'
                description: Specifies if the estimated precision is stored.
                kind_of_value: boolean
                name: store_precision
                optional: 'True'
                path: store_precision
              - default_value: 'False'
                description: If True, the support of robust location and covariance
                  estimates is computed, and a covariance estimate is recomputed from
                  it, without centering the data. Useful to work with data whose mean
                  is significantly equal to zero but is not exactly zero. If False,
                  the robust location and covariance are directly computed with the
                  FastMCD algorithm without additional treatment.
                kind_of_value: boolean
                name: assume_centered
                optional: 'True'
                path: assume_centered
              - default_value: None
                description: 'The proportion of points to be included in the support
                of the raw MCD estimate. If None, the minimum value of support_fraction
                will be used within the algorithm: [n_sample + n_features + 1] / 2.'
                kind_of_value: '{float in (0., 1.), None}'
                name: support_fraction
                optional: 'True'
                path: support_fraction
              - default_value: '0.1'
                description: The amount of contamination of the data set, i.e. the proportion
                  of outliers in the data set.
                kind_of_value: float in (0., 0.5)
                name: contamination
                optional: 'True'
                path: contamination
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters: []
    :cross_decomposition.cca_.CCA:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: canonical correlation analysis
          other_names:
            - CCA
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '2'
                description: Number of components to keep.
                kind_of_value: integer
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: 'True'
                description: Whether to scale the data.
                kind_of_value: boolean
                name: scale
                optional: 'False'
                path: scale
              - default_value: '0.000006'
                description: Tolerance used in the iterative algorithm.
                kind_of_value: positive float
                name: tolerance
                optional: 'False'
                path: tol
              - default_value: 'True'
                description: "Whether the deflation should be done on a copy. Let the\
                \ default value to True unless you don\u2019t care about side effect."
                kind_of_value: boolean
                name: copy
                optional: 'True'
                path: copy
            optimisation_parameters:
              - default_value: '500'
                description: The maximum number of iterations of the NIPALS inner loop.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
    :cross_decomposition.pls_.PLSCanonical:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: 2 blocks canonical partial least squares
          other_names:
            - PLS Canonical
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '2'
                description: Number of components to keep.
                kind_of_value: integer
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: 'True'
                description: Whether to scale the data.
                kind_of_value: boolean
                name: scale
                optional: 'False'
                path: scale
              - default_value: '''nipals'''
                description: The algorithm used to estimate the weights.
                kind_of_value: '{''nipals'', ''svd''}'
                name: weight_algorithm
                optional: 'False'
                path: algorithm
              - default_value: '0.000006'
                description: Tolerance used in the iterative algorithm.
                kind_of_value: positive float
                name: tolerance
                optional: 'False'
                path: tol
              - default_value: 'True'
                description: "Whether the deflation should be done on a copy. Let the\
                \ default value to True unless you don\u2019t care about side effect."
                kind_of_value: boolean
                name: copy
                optional: 'True'
                path: copy
            optimisation_parameters:
              - default_value: '500'
                description: The maximum number of iterations of the NIPALS inner loop.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
    :cross_decomposition.pls_.PLSRegression:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: partial least squares regression
          other_names:
            - PLS Regession
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '2'
                description: Number of components to keep.
                kind_of_value: integer
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: 'True'
                description: Whether to scale the data.
                kind_of_value: boolean
                name: scale
                optional: 'False'
                path: scale
              - default_value: '0.000006'
                description: Tolerance used in the iterative algorithm.
                kind_of_value: positive float
                name: tolerance
                optional: 'False'
                path: tol
              - default_value: 'True'
                description: "Whether the deflation should be done on a copy. Let the\
                \ default value to True unless you don\u2019t care about side effect."
                kind_of_value: boolean
                name: copy
                optional: 'True'
                path: copy
            optimisation_parameters:
              - default_value: '500'
                description: The maximum number of iterations of the NIPALS inner loop.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
    :cross_decomposition.pls_.PLSSVD:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: partial least squares singular value decomposition
          other_names:
            - PLSSVD
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '2'
                description: Number of components to keep.
                kind_of_value: integer
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: 'True'
                description: Whether to scale the data.
                kind_of_value: boolean
                name: scale
                optional: 'False'
                path: scale
              - default_value: 'True'
                description: "Whether the deflation should be done on a copy. Let the\
                \ default value to True unless you don\u2019t care about side effect."
                kind_of_value: boolean
                name: copy
                optional: 'True'
                path: copy
            optimisation_parameters: []
    :decomposition.SparseCoder:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: sparse coding
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: The dictionary atoms used for sparse coding. Lines are
                  assumed to be normalized to unit norm.
                kind_of_value: array of shape [n_components, n_features]
                name: dictionary
                optional: 'False'
                path: dictionary
              - default_value: '''omp'''
                description: Algorithm used to transform the data.
                kind_of_value: '{''lasso_lars'', ''lasso_cd'', ''lars'', ''omp'', ''threshold''}'
                name: transform_algorithm
                optional: 'False'
                path: transform_algorithm
              - default_value: None
                description: Number of nonzero coefficients to target in each column
                  of the solution.
                kind_of_value: '{integer, None}'
                name: transform_num_nonzero_coefs
                optional: 'False'
                path: transform_n_nonzero_coefs
              - default_value: None
                description: Penalty applied to the L1 norm.
                kind_of_value: '{float, None}'
                name: l1_penalty
                optional: 'False'
                path: transform_alpha
              - default_value: 'False'
                description: Whether to split the sparse feature vector into the concatenation
                  of its negative part and its positive part. This can improve the performance
                  of downstream classifiers.
                kind_of_value: boolean
                name: split_sign
                optional: 'False'
                path: split_sign
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'False'
                path: n_jobs
    :decomposition.dict_learning.DictionaryLearning:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: dictionary learning
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Number of dictionary elements to extract.
                kind_of_value: '{integer, None}'
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: '1.0'
                description: sparsity controlling parameter
                kind_of_value: float
                name: sparsity_control_param
                optional: 'False'
                path: alpha
              - default_value: '0.00000001'
                description: Tolerance for numerical error.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: ''
                description: Method to solve the Lasso problem.
                kind_of_value: '{''lars'', ''cd''}'
                name: fit_algorithm
                optional: 'False'
                path: fit_algorithm
              - default_value: '''omp'''
                description: Algorithm used to transform the data.
                kind_of_value: '{''lasso_lars'', ''lasso_cd'', ''lars'', ''omp'', ''threshold''}'
                name: transform_algorithm
                optional: 'False'
                path: transform_algorithm
              - default_value: None
                description: Number of nonzero coefficients to target in each column
                  of the solution.
                kind_of_value: '{integer, None}'
                name: transform_num_nonzero_coefs
                optional: 'False'
                path: transform_n_nonzero_coefs
              - default_value: None
                description: Penalty applied to the L1 norm.
                kind_of_value: '{float, None}'
                name: l1_penalty
                optional: 'False'
                path: transform_alpha
              - default_value: None
                description: Initial value for the code, for warm restart.
                kind_of_value: '{array of shape (n_samples, n_components), None}'
                name: code_init
                optional: 'False'
                path: code_init
              - default_value: None
                description: Initial value for the dictionary, for warm restart.
                kind_of_value: '{array of shape (n_components, n_features), None}'
                name: dict_init
                optional: 'False'
                path: dict_init
              - default_value: 'False'
                description: To control the verbosity of the procedure.
                kind_of_value: boolean
                name: verbose
                optional: 'False'
                path: verbose
              - default_value: 'False'
                description: Whether to split the sparse feature vector into the concatenation
                  of its negative part and its positive part. This can improve the performance
                  of downstream classifiers.
                kind_of_value: boolean
                name: split_sign
                optional: 'False'
                path: split_sign
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '1000'
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :decomposition.dict_learning.MiniBatchDictionaryLearning:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: mini batch dictionary learning
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Number of dictionary elements to extract.
                kind_of_value: '{integer, None}'
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: '1.0'
                description: sparsity controlling parameter
                kind_of_value: float
                name: sparsity_control_param
                optional: 'False'
                path: alpha
              - default_value: ''
                description: Method to solve the Lasso problem.
                kind_of_value: '{''lars'', ''cd''}'
                name: fit_algorithm
                optional: 'False'
                path: fit_algorithm
              - default_value: '3'
                description: Size of minibatches for stochastic optimizers.
                kind_of_value: integer
                name: batch_size
                optional: 'True'
                path: batch_size
              - default_value: 'True'
                description: Whether to shuffle the samples before forming batches.
                kind_of_value: boolean
                name: shuffle
                optional: 'True'
                path: shuffle
              - default_value: None
                description: Initial value for the dictionary, for warm restart.
                kind_of_value: '{array of shape (n_components, n_features), None}'
                name: dict_init
                optional: 'False'
                path: dict_init
              - default_value: '''omp'''
                description: Algorithm used to transform the data.
                kind_of_value: '{''lasso_lars'', ''lasso_cd'', ''lars'', ''omp'', ''threshold''}'
                name: transform_algorithm
                optional: 'False'
                path: transform_algorithm
              - default_value: None
                description: Number of nonzero coefficients to target in each column
                  of the solution.
                kind_of_value: '{integer, None}'
                name: transform_num_nonzero_coefs
                optional: 'False'
                path: transform_n_nonzero_coefs
              - default_value: None
                description: Penalty applied to the L1 norm.
                kind_of_value: '{float, None}'
                name: l1_penalty
                optional: 'False'
                path: transform_alpha
              - default_value: 'False'
                description: To control the verbosity of the procedure.
                kind_of_value: boolean
                name: verbose
                optional: 'False'
                path: verbose
              - default_value: 'False'
                description: Whether to split the sparse feature vector into the concatenation
                  of its negative part and its positive part. This can improve the performance
                  of downstream classifiers.
                kind_of_value: boolean
                name: split_sign
                optional: 'False'
                path: split_sign
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '1000'
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: n_iter
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :decomposition.factor_analysis.FactorAnalysis:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: factor analysis
          other_names:
            - FA
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Dimensionality of latent space, the number of components
                  of X that are obtained after transform.
                kind_of_value: '{integer, None}'
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: '0.01'
                description: Stopping tolerance for EM algorithm.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: None
                description: The initial guess of the noise variance for each feature.
                kind_of_value: '{array of shape (n_features,), None}'
                name: noise_variance_init
                optional: 'False'
                path: noise_variance_init
              - default_value: '''randomized'''
                description: Selects the algorithm for finding singular vectors.
                kind_of_value: '{''randomized'', ''lapack''}'
                name: svd_method
                optional: 'False'
                path: svd_method
              - default_value: '3'
                description: Number of iterations for the power method computed by svd_solver
                  == 'randomized'.
                kind_of_value: integer
                name: iterated_power
                optional: 'True'
                path: iterated_power
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '1000'
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :decomposition.fastica_.FastICA:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: fast independent component analysis
          other_names:
            - fast ICA
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Number of components to use. If none is passed, all are
                  used.
                kind_of_value: '{integer, None}'
                name: num_components
                optional: 'True'
                path: n_components
              - default_value: '''parallel'''
                description: Apply parallel or deflational algorithm for FastICA.
                kind_of_value: '{''parallel'', ''deflation''}'
                name: algorithm
                optional: 'False'
                path: algorithm
              - default_value: 'True'
                description: If whiten is false, the data is already considered to be
                  whitened, and no whitening is performed.
                kind_of_value: boolean
                name: whiten
                optional: 'True'
                path: whiten
              - default_value: '''logcosh'''
                description: The functional form of the G function used in the approximation
                  to neg-entropy.
                kind_of_value: '{''logcosh'', ''exp'', ''cube'', function that contains
                a tuple containing the value of the function, and of its derivative}'
                name: functional_function_form
                optional: 'True'
                path: fun
              - default_value: None
                description: Arguments to send to the functional form.
                kind_of_value: '{dictionary, None}'
                name: function_arguments
                optional: 'True'
                path: fun_args
              - default_value: '0.0001'
                description: Tolerance on update at each iteration.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: None
                description: The mixing matrix to be used to initialize the algorithm.
                kind_of_value: '{array of shape (n_components, n_components), None}'
                name: w_init
                optional: 'False'
                path: w_init
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '200'
                description: Maximum number of iterations during fit.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :decomposition.incremental_pca.IncrementalPCA:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: incremental principal component analysis
          other_names:
            - incremental PCA
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Number of components to keep.
                kind_of_value: '{integer, None}'
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: 'False'
                description: When True (False by default) the components_ vectors are
                  multiplied by the square root of n_samples and then divided by the
                  singular values to ensure uncorrelated outputs with unit component-wise
                  variances. Whitening will remove some information from the transformed
                  signal (the relative variance scales of the components) but can sometime
                  improve the predictive accuracy of the downstream estimators by making
                  their data respect some hard-wired assumptions.
                kind_of_value: boolean
                name: whiten
                optional: 'True'
                path: whiten
              - default_value: 'True'
                description: If False, data passed to fit are overwritten and running
                  fit(X).transform(X) will not yield the expected results, use fit_transform(X)
                  instead.
                kind_of_value: boolean
                name: copy
                optional: 'False'
                path: copy
              - default_value: None
                description: The number of samples to use for each batch.
                kind_of_value: '{integer, None}'
                name: batch_size
                optional: 'False'
                path: batch_size
            optimisation_parameters: []
    :decomposition.kernel_pca.KernelPCA:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: kernel principal component analysis
          other_names:
            - kernel PCA
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Number of components to keep.
                kind_of_value: '{integer, None}'
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: '''linear'''
                description: Kernel mapping used internally.
                kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''cosine'',
                ''precomputed''}'
                name: kernel
                optional: 'False'
                path: kernel
              - default_value: None
                description: Gamma parameter for the RBF, polynomial and sigmoid kernels.
                  Interpretation depends on kernels.
                kind_of_value: float
                name: gamma
                optional: 'False'
                path: gamma
              - default_value: '3'
                description: Degree of the polynomial kernel.
                kind_of_value: integer
                name: kernel_degree
                optional: 'False'
                path: degree
              - default_value: '1.0'
                description: Zero coefficient for polynomial and sigmoid kernels.
                kind_of_value: float
                name: zero_coefficient
                optional: 'False'
                path: coef0
              - default_value: None
                description: Additional parameters (keyword arguments) for kernel function
                  passed as callable object.
                kind_of_value: mapping of string to any
                name: kernel_parameters
                optional: 'False'
                path: kernel_params
              - default_value: '1'
                description: Hyperparameter of the ridge regression that learns the
                  inverse transform.
                kind_of_value: integer
                name: ridge_alpha
                optional: 'False'
                path: alpha
              - default_value: 'False'
                description: Learn the inverse transform for non-precomputed kernels.
                  (i.e. learn to find the pre-image of a point)
                kind_of_value: boolean
                name: fit_inverse_transform
                optional: 'False'
                path: fit_inverse_transform
              - default_value: '''auto'''
                description: Solver for the eigenvalue decomposition.  If num_components
                  is much less than the number of training samples, arpack may be more
                  efficient than the dense eigensolver.
                kind_of_value: '{''auto'', ''arpack'', ''dense'']'
                name: eigen_solver
                optional: 'False'
                path: eigen_solver
              - default_value: '0.0'
                description: Convergence tolerance for arpack. If 0, optimal value will
                  be chosen by arpack.
                kind_of_value: float
                name: tolerance
                optional: 'False'
                path: tol
              - default_value: 'False'
                description: If True, then all components with zero eigenvalues are
                  removed.
                kind_of_value: boolean
                name: remove_zero_eigenvalue
                optional: 'False'
                path: remove_zero_eig
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: 'True'
                description: If True, input X is copied and stored by the model in the
                  X_fit_ attribute. If no further changes will be done to X, setting
                  copy_X=False saves memory by storing a reference.
                kind_of_value: boolean
                name: copy_X
                optional: 'True'
                path: copy_X
            optimisation_parameters:
              - default_value: None
                description: Maximum number of iterations for arpack. If None, optimal
                  value will be chosen by arpack.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :decomposition.nmf.NMF:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: non-negative matrix factorization
          other_names:
            - NFM
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Number of components to use. If none is passed, all are
                  used.
                kind_of_value: '{integer, None}'
                name: num_components
                optional: 'True'
                path: n_components
              - default_value: None
                description: Method used to initialize the procedure.
                kind_of_value: '{''random'', ''nndsvd'', ''nndsvda'', ''nndsvdar'',
                ''custom'', None}'
                name: initialization_method
                optional: 'False'
                path: init
              - default_value: '''cd'''
                description: Numerical solver to use.
                kind_of_value: '{''cd'', ''mu''}'
                name: solver
                optional: 'False'
                path: solver
              - default_value: '0.0001'
                description: Tolerance of the stopping condition.
                kind_of_value: float
                name: tolerance
                optional: 'False'
                path: tol
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '0.0'
                description: Constant that multiplies the regularization terms. Set
                  it to zero to have no regularization.
                kind_of_value: double
                name: regularization_multiplier
                optional: 'False'
                path: alpha
              - default_value: '0.0'
                description: The ElasticNet mixing parameter, with 0 <= l1_ratio <=
                  1. For l1_ratio = 0 the penalty is an elementwise L2 penalty (aka
                  Frobenius Norm). For l1_ratio = 1 it is an elementwise L1 penalty.
                  For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.
                kind_of_value: double
                name: l1_ratio
                optional: 'False'
                path: l1_ratio
              - default_value: 'False'
                description: Whether to be verbose.
                kind_of_value: boolean
                name: verbose
                optional: 'False'
                path: verbose
              - default_value: 'False'
                description: If true, randomize the order of coordinates in the CD solver.
                kind_of_value: boolean
                name: shuffle
                optional: 'False'
                path: shuffle
            optimisation_parameters:
              - default_value: '200'
                description: Maximum number of iterations during fit.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :decomposition.online_lda.LatentDirichletAllocation:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: latent Dirichlet allocation
          other_names:
            - LDA
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '10'
                description: Number of topics.
                kind_of_value: integer
                name: num_components
                optional: 'True'
                path: n_components
              - default_value: None
                description: Prior of document topic distribution theta. If the value
                  is None, defaults to 1 / n_components. In the literature, this is
                  called alpha.
                kind_of_value: '{float, None}'
                name: doc_topic_prior
                optional: 'True'
                path: doc_topic_prior
              - default_value: None
                description: Prior of topic word distribution beta. If the value is
                  None, defaults to 1 / n_components. In the literature, this is called
                  eta.
                kind_of_value: '{float, None}'
                name: topic_word_prior
                optional: 'True'
                path: topic_word_prior
              - default_value: '''online'''
                description: Method used to update _component. Only used in fit method.
                  In general, if the data size is large, the online update will be much
                  faster than the batch update.
                kind_of_value: '{''batch'', ''online''}'
                name: learning_method
                optional: 'False'
                path: learning_method
              - default_value: '0.7'
                description: It is a parameter that control learning rate in the online
                  learning method. The value should be set between (0.5, 1.0] to guarantee
                  asymptotic convergence. When the value is 0.0 and batch_size is n_samples,
                  the update method is same as batch learning. In the literature, this
                  is called kappa.
                kind_of_value: float between (0.5, 1.0]
                name: learning_decay
                optional: 'True'
                path: learning_decay
              - default_value: '10.'
                description: A (positive) parameter that downweights early iterations
                  in online learning. It should be greater than 1.0. In the literature,
                  this is called tau_0.
                kind_of_value: float > 0
                name: learning_offset
                optional: 'True'
                path: learning_offset
              - default_value: '128'
                description: Number of documents to use in each EM iteration. Only used
                  in online learning.
                kind_of_value: integer
                name: batch_size
                optional: 'True'
                path: batch_size
              - default_value: '0'
                description: How often to evaluate perplexity. Only used in fit method.
                  set it to 0 or negative number to not evalute perplexity in training
                  at all. Evaluating perplexity can help you check convergence in training
                  process, but it will also increase total training time. Evaluating
                  perplexity in every iteration might increase training time up to two-fold.
                kind_of_value: integer
                name: evaluate_every
                optional: 'True'
                path: evaluate_every
              - default_value: '1000000'
                description: Total number of documents. Only used in the partial_fit
                  method.
                kind_of_value: integer
                name: total_samples
                optional: 'True'
                path: total_samples
              - default_value: '0.1'
                description: Perplexity tolerance in batch learning.
                kind_of_value: float
                name: perplexity_tolerance
                optional: 'True'
                path: perp_tol
              - default_value: '0.001'
                description: Stopping tolerance for updating document topic distribution
                  in E-step.
                kind_of_value: float
                name: mean_change_tolerance
                optional: 'True'
                path: mean_change_tol
              - default_value: '100'
                description: Max number of iterations for updating document topic distribution
                  in the E-step.
                kind_of_value: integer
                name: max_doc_update_iteration
                optional: 'False'
                path: max_doc_update_iter
              - default_value: '0'
                description: Controls the verbosity level.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '200'
                description: Maximum number of iterations during fit.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
              - default_value: '1'
                description: The number of jobs to use in the E-step. If -1, all CPUs
                  are used. If -1 all CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :decomposition.pca.PCA:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: principal component analysis
          other_names:
            - PCA
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Number of components to keep.
                kind_of_value: '{integer, float, None, ''mle''}'
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: 'True'
                description: If False, data passed to fit are overwritten and running
                  fit(X).transform(X) will not yield the expected results, use fit_transform(X)
                  instead.
                kind_of_value: boolean
                name: copy
                optional: 'False'
                path: copy
              - default_value: 'False'
                description: When True (False by default) the components_ vectors are
                  multiplied by the square root of n_samples and then divided by the
                  singular values to ensure uncorrelated outputs with unit component-wise
                  variances. Whitening will remove some information from the transformed
                  signal (the relative variance scales of the components) but can sometime
                  improve the predictive accuracy of the downstream estimators by making
                  their data respect some hard-wired assumptions.
                kind_of_value: boolean
                name: whiten
                optional: 'True'
                path: whiten
              - default_value: '''auto'''
                description: singular value decomposition solver
                kind_of_value: ' {''auto'', ''full'', ''arpack'', ''randomized''}'
                name: svd_solver
                optional: 'False'
                path: svd_solver
              - default_value: '0.0'
                description: Tolerance for singular values computed by svd_solver ==
                  'arpack'.
                kind_of_value: float >= 0
                name: tolerance
                optional: 'False'
                path: tol
              - default_value: '''auto'''
                description: Number of iterations for the power method computed by svd_solver
                  == 'randomized'.
                kind_of_value: '{integer >= 0, ''auto''}'
                name: iterated_power
                optional: 'False'
                path: iterated_power
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters: []
    :decomposition.sparse_pca.MiniBatchSparsePCA:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: mini batch sparse principal component analysis
          other_names:
            - mini batch sparse PCA
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Number of sparse atoms to extract.
                kind_of_value: '{integer, None}'
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: '1'
                description: Sparsity controlling parameter. Higher values lead to sparser
                  components.
                kind_of_value: float
                name: sparsity_parmeter
                optional: 'False'
                path: alpha
              - default_value: '0.01'
                description: Amount of ridge shrinkage to apply in order to improve
                  conditioning when calling the transform method.
                kind_of_value: float
                name: ridge_alpha
                optional: 'False'
                path: ridge_alpha
              - default_value: ''
                description: ''
                kind_of_value: '{callable, None}'
                name: callback
                optional: 'True'
                path: callback
              - default_value: '3'
                description: The number of features to take in each mini batch.
                kind_of_value: integer
                name: batch_size
                optional: 'True'
                path: batch_size
              - default_value: '0'
                description: Controls the verbosity; the higher, the more messages.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'True'
                description: Whether to shuffle the data before splitting it in batches.
                kind_of_value: boolean
                name: shuffle
                optional: 'True'
                path: shuffle
              - default_value: '''lars'''
                description: Embedding method.
                kind_of_value: '{''lars'', ''cd''}'
                name: lasso_method
                optional: 'False'
                path: method
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '100'
                description: Number of iterations to perform for each mini batch.
                kind_of_value: integer
                name: num_iter
                optional: 'True'
                path: n_iter
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'False'
                path: n_jobs
    :decomposition.sparse_pca.SparsePCA:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: sparse principal component analysis
          other_names:
            - sparse PCA
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Number of sparse atoms to extract.
                kind_of_value: '{integer, None}'
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: '1'
                description: Sparsity controlling parameter. Higher values lead to sparser
                  components.
                kind_of_value: float
                name: sparsity_parmeter
                optional: 'False'
                path: alpha
              - default_value: '0.01'
                description: Amount of ridge shrinkage to apply in order to improve
                  conditioning when calling the transform method.
                kind_of_value: float
                name: ridge_alpha
                optional: 'False'
                path: ridge_alpha
              - default_value: '0.00000001'
                description: Tolerance for the stopping condition.
                kind_of_value: float
                name: tolerance
                optional: 'False'
                path: tol
              - default_value: '''lars'''
                description: Embedding method.
                kind_of_value: '{''lars'', ''cd''}'
                name: lasso_method
                optional: 'False'
                path: method
              - default_value: None
                description: Initial values for the loadings for warm restart scenarios.
                kind_of_value: array of shape (n_samples, n_components)
                name: U_init
                optional: 'False'
                path: U_init
              - default_value: None
                description: Initial values for the components for warm restart scenarios.
                kind_of_value: array of shape (n_components, n_features)
                name: V_init
                optional: 'False'
                path: V_init
              - default_value: '0'
                description: Controls the verbosity; the higher, the more messages.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '1000'
                description: Maximum number of iterations to perform.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'False'
                path: n_jobs
    :decomposition.truncated_svd.TruncatedSVD:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: truncated single value decomposition
          other_names:
            - truncated SVD
            - LSA
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '2'
                description: Number of sparse atoms to extract.
                kind_of_value: '{integer, None}'
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: '''randomized'''
                description: singular value decomposition solver
                kind_of_value: ' {''arpack'', ''randomized''}'
                name: svd_solver
                optional: 'False'
                path: algorithm
              - default_value: '0.0'
                description: Tolerance for ARPACK. 0 means machine precision. Ignored
                  by randomized SVD solver.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '5'
                description: Number of iterations for randomized SVD solver. Not used
                  by ARPACK. The default is larger than the default in randomized_svd
                  to handle sparse matrices that may have large slowly decaying spectrum.
                kind_of_value: integer
                name: num_iter
                optional: 'True'
                path: n_iter
    :discriminant_analysis.LinearDiscriminantAnalysis:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: linear discriminant analysis
          other_names:
            - LDA
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '''svd'''
                description: 'Possible values: singular value decomposition (svd), least
                squares solution (lsqr), eigenvalue decomposition (eigen)'
                kind_of_value: '{''svd'', ''lsqr'', ''eigen''}'
                name: estimation_algorithm
                optional: 'True'
                path: solver
              - default_value: None
                description: 'Shrinkage is a tool to improve estimation of covariance
                matrices in situations where the number of training samples is small
                compared to the number of features. Possible values: no shrinkage
                (None), automatic shrinkage using the Ledoit-Wolf lemma (auto), fixed
                shrinkage parameter(float between 0 and 1)'
                kind_of_value: '{None, ''auto'', float between 0 and 1}'
                name: shrinkage
                optional: 'True'
                path: shrinkage
              - default_value: None
                description: Class priors.
                kind_of_value: array in shape of (n_classes,)
                name: priors
                optional: 'True'
                path: priors
              - default_value: None
                description: Number of components (< n_classes - 1) for dimensionality
                  reduction.
                kind_of_value: integer
                name: num_components
                optional: 'True'
                path: n_components
              - default_value: 'False'
                description: "Additionally compute class covariance matrix (default\
                \ False), used only in \u2018svd\u2019 solver."
                kind_of_value: boolean
                name: store_covariance
                optional: 'True'
                path: store_covariance
              - default_value: '0.0001'
                description: Threshold used for rank estimation in SVD solver.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
            optimisation_parameters: []
    :discriminant_analysis.QuadraticDiscriminantAnalysis:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: quadratic discriminant analysis
          other_names:
            - QDA
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Class priors.
                kind_of_value: array in shape of [n_classes]
                name: priors
                optional: 'True'
                path: priors
              - default_value: '0.0'
                description: Regularizes the covariance estimate.
                kind_of_value: float
                name: regularisation_parameter
                optional: 'True'
                path: reg_param
              - default_value: 'False'
                description: If True the covariance matrices are computed and stored
                  in the self.covariance_ attribute.
                kind_of_value: boolean
                name: store_covariance
                optional: 'False'
                path: store_covariance
              - default_value: '0.0001'
                description: Threshold used for rank estimation.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
            optimisation_parameters: []
    :ensemble.VotingClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: voting classifier
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: Used estimators.
                kind_of_value: string, estimator tuple{('lr', clf1), ('rf', clf2), ('gnb',
                  clf3), ('dt', clf1), ('knn', clf2), ('svc', clf3)}
                name: estimators
                optional: 'False'
                path: estimators
              - default_value: '''hard'''
                description: If 'hard', uses predicted class labels for majority rule
                  voting. Else if 'soft', predicts the class label based on the argmax
                  of the sums of the predicted probabilities, which is recommended for
                  an ensemble of well-calibrated classifiers.
                kind_of_value: '{''hard'', ''soft''}'
                name: voting
                optional: 'False'
                path: voting
              - default_value: None
                description: Sequence of weights (float or int) to weight the occurrences
                  of predicted class labels (hard voting) or class probabilities before
                  averaging (soft voting). Uses uniform weights if None.
                kind_of_value: array-like, shape = [n_classifiers] integer, float, None
                name: weights
                optional: 'True'
                path: weights
              - default_value: None
                description: Affects shape of transform output only when voting='soft'.
                kind_of_value: '{boolean, None}'
                name: flatten_transform
                optional: 'True'
                path: flatten_transform
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :ensemble.bagging.BaggingClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: bagging classifier
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: The base estimator to fit on random subsets of the dataset.
                kind_of_value: '{object, None}'
                name: base_estimator
                optional: 'True'
                path: base_estimator
              - default_value: '10'
                description: The number of trees in the forest.
                kind_of_value: integer
                name: num_estimators
                optional: 'True'
                path: n_estimators
              - default_value: '1.0'
                description: The number of samples to draw from X to train each base
                  estimator.
                kind_of_value: '{integer, float}'
                name: max_samples
                optional: 'True'
                path: max_samples
              - default_value: '1.0'
                description: The number of features to draw from X to train each base
                  estimator.
                kind_of_value: '{integer, float}'
                name: max_features
                optional: 'True'
                path: max_features
              - default_value: 'True'
                description: Whether samples are drawn with replacement.
                kind_of_value: boolean
                name: bootstrap
                optional: 'True'
                path: bootstrap
              - default_value: 'False'
                description: Whether features are drawn with replacement.
                kind_of_value: boolean
                name: bootstrap_features
                optional: 'True'
                path: bootstrap_features
              - default_value: 'False'
                description: Whether to use out-of-bag samples to estimate the generalization
                  error.
                kind_of_value: boolean
                name: oob_samples
                optional: 'False'
                path: oob_score
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit and add more estimators to the ensemble, otherwise, just fit
                  a whole new ensemble.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '0'
                description: Controls the verbosity of the tree building process.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :ensemble.bagging.BaggingRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: bagging regressor
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: The base estimator to fit on random subsets of the dataset.
                kind_of_value: '{object, None}'
                name: base_estimator
                optional: 'True'
                path: base_estimator
              - default_value: '10'
                description: The number of trees in the forest.
                kind_of_value: integer
                name: num_estimators
                optional: 'True'
                path: n_estimators
              - default_value: '1.0'
                description: The number of samples to draw from X to train each base
                  estimator.
                kind_of_value: '{integer, float}'
                name: max_samples
                optional: 'True'
                path: max_samples
              - default_value: '1.0'
                description: The number of features to draw from X to train each base
                  estimator.
                kind_of_value: '{integer, float}'
                name: max_features
                optional: 'True'
                path: max_features
              - default_value: 'True'
                description: Whether samples are drawn with replacement.
                kind_of_value: boolean
                name: bootstrap
                optional: 'True'
                path: bootstrap
              - default_value: 'False'
                description: Whether features are drawn with replacement.
                kind_of_value: boolean
                name: bootstrap_features
                optional: 'True'
                path: bootstrap_features
              - default_value: 'False'
                description: Whether to use out-of-bag samples to estimate the generalization
                  error.
                kind_of_value: boolean
                name: oob_samples
                optional: 'False'
                path: oob_score
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit and add more estimators to the ensemble, otherwise, just fit
                  a whole new ensemble.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '0'
                description: Controls the verbosity of the tree building process.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :ensemble.forest.ExtraTreesClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: extra-trees classifier
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '10'
                description: The number of trees in the forest.
                kind_of_value: integer
                name: num_estimators
                optional: 'True'
                path: n_estimators
              - default_value: '''gini'''
                description: The function to measure the quality of a split.
                kind_of_value: '{''gini'', ''entropy''}'
                name: split_quality
                optional: 'True'
                path: criterion
              - default_value: '''auto'''
                description: The number of features to consider when looking for the
                  best split.
                kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
                name: max_features
                optional: 'True'
                path: max_features
              - default_value: None
                description: The maximum depth of the tree.
                kind_of_value: '{integer, None}'
                name: max_depth_tree
                optional: 'True'
                path: max_depth
              - default_value: '2'
                description: The minimum number of samples required to split an internal
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_split
                optional: 'True'
                path: min_samples_split
              - default_value: '1'
                description: The minimum number of samples required to be at a leaf
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_leaf
                optional: 'True'
                path: min_samples_leaf
              - default_value: '0.0'
                description: The minimum weighted fraction of the sum total of weights
                  (of all the input samples) required to be at a leaf node.
                kind_of_value: float
                name: min_weight_fraction_leaf
                optional: 'True'
                path: min_weight_fraction_leaf
              - default_value: None
                description: Grow a tree with max_leaf_nodes in best-first fashion.
                kind_of_value: '{integer, None}'
                name: max_leaf_nodes
                optional: 'True'
                path: max_leaf_nodes
              - default_value: '0.0'
                description: A node will be split if this split induces a decrease of
                  the impurity greater than or equal to this value.
                kind_of_value: float
                name: min_impurity_decrease
                optional: 'True'
                path: min_impurity_decrease
              - default_value: 'False'
                description: Whether bootstrap samples are used when building trees.
                kind_of_value: boolean
                name: bootstrap
                optional: 'True'
                path: bootstrap
              - default_value: 'False'
                description: Whether to use out-of-bag samples to estimate the generalization
                  accuracy.
                kind_of_value: boolean
                name: oob_samples
                optional: 'False'
                path: oob_score
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '0'
                description: Controls the verbosity of the tree building process.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit and add more estimators to the ensemble, otherwise, just fit
                  a whole new forest.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: None
                description: Weights associated with classes.
                kind_of_value: '{dict, ''balanced'', ''balanced_subsample'', None}'
                name: class_weight
                optional: 'True'
                path: class_weight
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :ensemble.forest.ExtraTreesRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: extra-trees regressor
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '10'
                description: The number of trees in the forest.
                kind_of_value: integer
                name: num_estimators
                optional: 'True'
                path: n_estimators
              - default_value: '''mse'''
                description: The function to measure the quality of a split.
                kind_of_value: '{''mse'', ''mae''}'
                name: split_quality
                optional: 'True'
                path: criterion
              - default_value: '''auto'''
                description: The number of features to consider when looking for the
                  best split.
                kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
                name: max_features
                optional: 'True'
                path: max_features
              - default_value: None
                description: The maximum depth of the tree.
                kind_of_value: '{integer, None}'
                name: max_depth_tree
                optional: 'True'
                path: max_depth
              - default_value: '2'
                description: The minimum number of samples required to split an internal
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_split
                optional: 'True'
                path: min_samples_split
              - default_value: '1'
                description: The minimum number of samples required to be at a leaf
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_leaf
                optional: 'True'
                path: min_samples_leaf
              - default_value: '0.0'
                description: The minimum weighted fraction of the sum total of weights
                  (of all the input samples) required to be at a leaf node.
                kind_of_value: float
                name: min_weight_fraction_leaf
                optional: 'True'
                path: min_weight_fraction_leaf
              - default_value: None
                description: Grow a tree with max_leaf_nodes in best-first fashion.
                kind_of_value: '{integer, None}'
                name: max_leaf_nodes
                optional: 'True'
                path: max_leaf_nodes
              - default_value: '0.0'
                description: A node will be split if this split induces a decrease of
                  the impurity greater than or equal to this value.
                kind_of_value: float
                name: min_impurity_decrease
                optional: 'True'
                path: min_impurity_decrease
              - default_value: 'False'
                description: Whether bootstrap samples are used when building trees.
                kind_of_value: boolean
                name: bootstrap
                optional: 'True'
                path: bootstrap
              - default_value: 'False'
                description: Whether to use out-of-bag samples to estimate the R^2 on
                  unseen data.
                kind_of_value: boolean
                name: oob_samples
                optional: 'False'
                path: oob_score
              - default_value: '0'
                description: Controls the verbosity of the tree building process.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit and add more estimators to the ensemble, otherwise, just fit
                  a whole new forest.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :ensemble.forest.RandomForestClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: random forest classifier
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '10'
                description: The number of trees in the forest.
                kind_of_value: integer
                name: num_estimators
                optional: 'True'
                path: n_estimators
              - default_value: '''gini'''
                description: The function to measure the quality of a split.
                kind_of_value: '{''gini'', ''entropy''}'
                name: split_quality
                optional: 'True'
                path: criterion
              - default_value: '''auto'''
                description: The number of features to consider when looking for the
                  best split.
                kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
                name: max_features
                optional: 'True'
                path: max_features
              - default_value: None
                description: The maximum depth of the tree.
                kind_of_value: '{integer, None}'
                name: max_depth_tree
                optional: 'True'
                path: max_depth
              - default_value: '2'
                description: The minimum number of samples required to split an internal
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_split
                optional: 'True'
                path: min_samples_split
              - default_value: '1'
                description: The minimum number of samples required to be at a leaf
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_leaf
                optional: 'True'
                path: min_samples_leaf
              - default_value: '0.0'
                description: The minimum weighted fraction of the sum total of weights
                  (of all the input samples) required to be at a leaf node.
                kind_of_value: float
                name: min_weight_fraction_leaf
                optional: 'True'
                path: min_weight_fraction_leaf
              - default_value: None
                description: Grow a tree with max_leaf_nodes in best-first fashion.
                kind_of_value: '{integer, None}'
                name: max_leaf_nodes
                optional: 'True'
                path: max_leaf_nodes
              - default_value: '0.0'
                description: A node will be split if this split induces a decrease of
                  the impurity greater than or equal to this value.
                kind_of_value: float
                name: min_impurity_decrease
                optional: 'True'
                path: min_impurity_decrease
              - default_value: 'True'
                description: Whether bootstrap samples are used when building trees.
                kind_of_value: boolean
                name: bootstrap
                optional: 'True'
                path: bootstrap
              - default_value: 'False'
                description: Whether to use out-of-bag samples to estimate the generalization
                  accuracy.
                kind_of_value: boolean
                name: oob_samples
                optional: 'False'
                path: oob_score
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '0'
                description: Controls the verbosity of the tree building process.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit and add more estimators to the ensemble, otherwise, just fit
                  a whole new forest.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: None
                description: Weights associated with classes.
                kind_of_value: '{dict, ''balanced'', None}'
                name: class_weight
                optional: 'False'
                path: class_weight
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :ensemble.forest.RandomForestRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: random forest regressor
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '10'
                description: The number of trees in the forest.
                kind_of_value: integer
                name: num_estimators
                optional: 'True'
                path: n_estimators
              - default_value: '''mse'''
                description: The function to measure the quality of a split.
                kind_of_value: '{''mse'', ''mae''}'
                name: split_quality
                optional: 'True'
                path: criterion
              - default_value: '''auto'''
                description: The number of features to consider when looking for the
                  best split.
                kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
                name: max_features
                optional: 'True'
                path: max_features
              - default_value: None
                description: The maximum depth of the tree.
                kind_of_value: '{integer, None}'
                name: max_depth_tree
                optional: 'True'
                path: max_depth
              - default_value: '2'
                description: The minimum number of samples required to split an internal
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_split
                optional: 'True'
                path: min_samples_split
              - default_value: '1'
                description: The minimum number of samples required to be at a leaf
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_leaf
                optional: 'True'
                path: min_samples_leaf
              - default_value: '0.0'
                description: The minimum weighted fraction of the sum total of weights
                  (of all the input samples) required to be at a leaf node.
                kind_of_value: float
                name: min_weight_fraction_leaf
                optional: 'True'
                path: min_weight_fraction_leaf
              - default_value: None
                description: Grow a tree with max_leaf_nodes in best-first fashion.
                kind_of_value: '{integer, None}'
                name: max_leaf_nodes
                optional: 'True'
                path: max_leaf_nodes
              - default_value: '0.0'
                description: A node will be split if this split induces a decrease of
                  the impurity greater than or equal to this value.
                kind_of_value: float
                name: min_impurity_decrease
                optional: 'True'
                path: min_impurity_decrease
              - default_value: 'True'
                description: Whether bootstrap samples are used when building trees.
                kind_of_value: boolean
                name: bootstrap
                optional: 'True'
                path: bootstrap
              - default_value: 'False'
                description: Whether to use out-of-bag samples to estimate the R^2 on
                  unseen data.
                kind_of_value: boolean
                name: oob_samples
                optional: 'True'
                path: oob_score
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '0'
                description: Controls the verbosity of the tree building process.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit and add more estimators to the ensemble, otherwise, just fit
                  a whole new forest.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :ensemble.forest.RandomTreesEmbedding:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: random trees ensemble
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '10'
                description: The number of trees in the forest.
                kind_of_value: integer
                name: num_estimators
                optional: 'True'
                path: n_estimators
              - default_value: None
                description: The maximum depth of the tree.
                kind_of_value: '{integer, None}'
                name: max_depth_tree
                optional: 'True'
                path: max_depth
              - default_value: '2'
                description: The minimum number of samples required to split an internal
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_split
                optional: 'True'
                path: min_samples_split
              - default_value: '1'
                description: The minimum number of samples required to be at a leaf
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_leaf
                optional: 'True'
                path: min_samples_leaf
              - default_value: '0.0'
                description: The minimum weighted fraction of the sum total of weights
                  (of all the input samples) required to be at a leaf node.
                kind_of_value: float
                name: min_weight_fraction_leaf
                optional: 'True'
                path: min_weight_fraction_leaf
              - default_value: None
                description: Grow a tree with max_leaf_nodes in best-first fashion.
                kind_of_value: '{integer, None}'
                name: max_leaf_nodes
                optional: 'True'
                path: max_leaf_nodes
              - default_value: '0.0'
                description: A node will be split if this split induces a decrease of
                  the impurity greater than or equal to this value.
                kind_of_value: float
                name: min_impurity_decrease
                optional: 'True'
                path: min_impurity_decrease
              - default_value: 'True'
                description: Whether bootstrap samples are used when building trees.
                kind_of_value: boolean
                name: bootstrap
                optional: 'True'
                path: bootstrap
              - default_value: 'True'
                description: Whether or not to return a sparse CSR matrix, as default
                  behavior, or to return a dense array compatible with dense pipeline
                  operators.
                kind_of_value: boolean
                name: sparse_output
                optional: 'True'
                path: sparse_output
              - default_value: '0'
                description: Controls the verbosity of the tree building process.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit and add more estimators to the ensemble, otherwise, just fit
                  a whole new forest.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :ensemble.gradient_boosting.GradientBoostingClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: gradient boosting for classification
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '''deviance'''
                description: Loss function to be optimized.
                kind_of_value: '{''deviance'', ''exponential''}'
                name: loss
                optional: 'True'
                path: loss
              - default_value: '0.1'
                description: learning rate shrinks the contribution of each tree by
                  learning_rate.
                kind_of_value: float
                name: learning_rate
                optional: 'True'
                path: learning_rate
              - default_value: '100'
                description: The number of boosting stages to perform. Gradient boosting
                  is fairly robust to over-fitting so a large number usually results
                  in better performance.
                kind_of_value: integer
                name: num_estimators
                optional: 'True'
                path: n_estimators
              - default_value: '3'
                description: The maximum depth of the individual regression estimators.
                  The maximum depth limits the number of nodes in the tree. Tune this
                  parameter for best performance; the best value depends on the interaction
                  of the input variables.
                kind_of_value: integer
                name: max_depth_tree
                optional: 'True'
                path: max_depth
              - default_value: '''friedman_mse'''
                description: The function to measure the quality of a split.
                kind_of_value: '{''mse'', ''friedman_mse'', ''mae''}'
                name: split_quality
                optional: 'True'
                path: criterion
              - default_value: '2'
                description: The minimum number of samples required to split an internal
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_split
                optional: 'True'
                path: min_samples_split
              - default_value: '1'
                description: The minimum number of samples required to be at a leaf
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_leaf
                optional: 'True'
                path: min_samples_leaf
              - default_value: '0.0'
                description: The minimum weighted fraction of the sum total of weights
                  (of all the input samples) required to be at a leaf node.
                kind_of_value: float
                name: min_weight_fraction_leaf
                optional: 'True'
                path: min_weight_fraction_leaf
              - default_value: '1.0'
                description: The fraction of samples to be used for fitting the individual
                  base learners.
                kind_of_value: float
                name: frac_subsample
                optional: 'True'
                path: subsample
              - default_value: None
                description: The number of features to consider when looking for the
                  best split.
                kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
                name: max_features
                optional: 'True'
                path: max_features
              - default_value: None
                description: Grow a tree with max_leaf_nodes in best-first fashion.
                kind_of_value: integer, None
                name: max_leaf_nodes
                optional: 'True'
                path: max_leaf_nodes
              - default_value: '0.0'
                description: A node will be split if this split induces a decrease of
                  the impurity greater than or equal to this value.
                kind_of_value: float
                name: min_impurity_decrease
                optional: 'True'
                path: min_impurity_decrease
              - default_value: None
                description: An estimator object that is used to compute the initial
                  predictions.
                kind_of_value: BaseEstimator, None
                name: init_estimator
                optional: 'True'
                path: init
              - default_value: '0'
                description: Controls the verbosity of the tree building process.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit and add more estimators to the ensemble, otherwise, just erase
                  the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'False'
                path: warm_start
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '''auto'''
                description: Whether to presort the data to speed up the finding of
                  best splits in fitting.
                kind_of_value: '{boolean, ''auto''}'
                name: presort
                optional: 'True'
                path: presort
    :ensemble.gradient_boosting.GradientBoostingRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: gradient boosting for regression
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '''ls'''
                description: Loss function to be optimized.
                kind_of_value: '{''ls'', ''lad'', ''huber'', ''quantile''}'
                name: loss
                optional: 'True'
                path: loss
              - default_value: '0.1'
                description: learning rate shrinks the contribution of each tree by
                  learning_rate.
                kind_of_value: float
                name: learning_rate
                optional: 'True'
                path: learning_rate
              - default_value: '100'
                description: The number of boosting stages to perform. Gradient boosting
                  is fairly robust to over-fitting so a large number usually results
                  in better performance.
                kind_of_value: integer
                name: num_estimators
                optional: 'False'
                path: n_estimators
              - default_value: '3'
                description: The maximum depth of the individual regression estimators.
                  The maximum depth limits the number of nodes in the tree. Tune this
                  parameter for best performance; the best value depends on the interaction
                  of the input variables.
                kind_of_value: integer
                name: max_depth_tree
                optional: 'True'
                path: max_depth
              - default_value: '''friedman_mse'''
                description: The function to measure the quality of a split.
                kind_of_value: '{''mse'', ''friedman_mse'', ''mae''}'
                name: split_quality
                optional: 'True'
                path: criterion
              - default_value: '2'
                description: The minimum number of samples required to split an internal
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_split
                optional: 'True'
                path: min_samples_split
              - default_value: '1'
                description: The minimum number of samples required to be at a leaf
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_leaf
                optional: 'True'
                path: min_samples_leaf
              - default_value: '0.0'
                description: The minimum weighted fraction of the sum total of weights
                  (of all the input samples) required to be at a leaf node.
                kind_of_value: float
                name: min_weight_fraction_leaf
                optional: 'True'
                path: min_weight_fraction_leaf
              - default_value: '1.0'
                description: The fraction of samples to be used for fitting the individual
                  base learners.
                kind_of_value: float
                name: frac_subsample
                optional: 'True'
                path: subsample
              - default_value: None
                description: The number of features to consider when looking for the
                  best split.
                kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
                name: max_features
                optional: 'True'
                path: max_features
              - default_value: None
                description: Grow a tree with max_leaf_nodes in best-first fashion.
                kind_of_value: integer, None
                name: max_leaf_nodes
                optional: 'True'
                path: max_leaf_nodes
              - default_value: '0.0'
                description: A node will be split if this split induces a decrease of
                  the impurity greater than or equal to this value.
                kind_of_value: float
                name: min_impurity_decrease
                optional: 'True'
                path: min_impurity_decrease
              - default_value: '0.9'
                description: 'The alpha-quantile of the huber loss function and the
                quantile loss function. '
                kind_of_value: float
                name: alpha_quantile
                optional: 'False'
                path: alpha
              - default_value: None
                description: An estimator object that is used to compute the initial
                  predictions.
                kind_of_value: BaseEstimator, None
                name: init_estimator
                optional: 'True'
                path: init
              - default_value: '0'
                description: Controls the verbosity of the tree building process.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit and add more estimators to the ensemble, otherwise, just erase
                  the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'False'
                path: warm_start
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '''auto'''
                description: Whether to presort the data to speed up the finding of
                  best splits in fitting.
                kind_of_value: '{boolean, ''auto''}'
                name: presort
                optional: 'True'
                path: presort
    :ensemble.iforest.IsolationForest:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: isolation forest
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '100'
                description: The number of base estimators in the ensemble.
                kind_of_value: integer
                name: num_estimators
                optional: 'True'
                path: n_estimators
              - default_value: '''auto'''
                description: The number of samples to draw from X to train each base
                  estimator.
                kind_of_value: '{integer, float, ''auto''}'
                name: max_samples
                optional: 'True'
                path: max_samples
              - default_value: '0.1'
                description: The amount of contamination of the data set, i.e. the proportion
                  of outliers in the data set.
                kind_of_value: float in (0., 0.5)
                name: contamination
                optional: 'True'
                path: contamination
              - default_value: '1.0'
                description: The number of features to draw from X to train each base
                  estimator.
                kind_of_value: '{integer, float}'
                name: max_features
                optional: 'True'
                path: max_features
              - default_value: 'False'
                description: If True, individual trees are fit on random subsets of
                  the training data sampled with replacement. If False, sampling without
                  replacement is performed.
                kind_of_value: boolean
                name: bootstrap
                optional: 'True'
                path: bootstrap
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '0'
                description: Controls the verbosity of the tree building process.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :ensemble.weight_boosting.AdaBoostClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: AdaBoost classifier
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: base_estimator.
                kind_of_value: '{object, None}'
                name: base_estimator
                optional: 'True'
                path: base_estimator
              - default_value: '50'
                description: The maximum number of estimators at which boosting is terminated.
                  In case of perfect fit, the learning procedure is stopped early.
                kind_of_value: integer
                name: num_estimators
                optional: 'True'
                path: n_estimators
              - default_value: '1.0'
                description: Learning rate shrinks the contribution of each regressor
                  by learning_rate.
                kind_of_value: float
                name: learning_rate
                optional: 'True'
                path: learning_rate
              - default_value: '''SAMME.R'''
                description: "If \u2018SAMME.R\u2019 then use the SAMME.R real boosting\
                \ algorithm. base_estimator must support calculation of class probabilities.\
                \ If \u2018SAMME\u2019 then use the SAMME discrete boosting algorithm.\
                \ The SAMME.R algorithm typically converges faster than SAMME, achieving\
                \ a lower tests error with fewer boosting iterations."
                kind_of_value: ' {''SAMME'', ''SAMME.R''}'
                name: boosting_algorithm
                optional: 'True'
                path: algorithm
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters: []
    :ensemble.weight_boosting.AdaBoostRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: AdaBoost regressor
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: base_estimator.
                kind_of_value: '{object, None}'
                name: base_estimator
                optional: 'True'
                path: base_estimator
              - default_value: '50'
                description: The maximum number of estimators at which boosting is terminated.
                  In case of perfect fit, the learning procedure is stopped early.
                kind_of_value: integer
                name: num_estimators
                optional: 'True'
                path: n_estimators
              - default_value: '1.0'
                description: Learning rate shrinks the contribution of each regressor
                  by learning_rate.
                kind_of_value: float
                name: learning_rate
                optional: 'True'
                path: learning_rate
              - default_value: '''linear'''
                description: Loss function to be optimized.
                kind_of_value: '{''linear'', ''square'', ''exponential''}'
                name: loss
                optional: 'True'
                path: loss
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters: []
    :feature_selection.RFE:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: recursive feature elimination
          other_names:
            - RFE
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: A supervised learning estimator with a fit method that
                  provides information about feature importance either through a coef_
                  attribute or through a feature_importances_ attribute.
                kind_of_value: estimator object
                name: estimator
                optional: 'False'
                path: estimator
              - default_value: None
                description: The number of features to select. If None, half of the
                  features are selected.
                kind_of_value: '{integer, None}'
                name: n_features_to_select
                optional: 'False'
                path: n_features_to_select
              - default_value: '1'
                description: If greater than or equal to 1, then step corresponds to
                  the (integer) number of features to remove at each iteration. If within
                  (0.0, 1.0), then step corresponds to the percentage (rounded down)
                  of features to remove at each iteration.
                kind_of_value: '{integer, float}'
                name: step
                optional: 'True'
                path: step
              - default_value: '0'
                description: Controls verbosity of output.
                kind_of_value: integer
                name: verbose
                optional: 'False'
                path: verbose
            optimisation_parameters: []
    :feature_selection.RFECV:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: recursive feature elimination with cross-validation
          other_names:
            - RFECV
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: The base estimator from which the transformer is built.
                kind_of_value: estimator object
                name: estimator
                optional: 'False'
                path: estimator
              - default_value: '1'
                description: If greater than or equal to 1, then step corresponds to
                  the (integer) number of features to remove at each iteration. If within
                  (0.0, 1.0), then step corresponds to the percentage (rounded down)
                  of features to remove at each iteration.
                kind_of_value: '{integer, float}'
                name: step
                optional: 'True'
                path: step
              - default_value: None
                description: Determines the cross-validation splitting strategy.
                kind_of_value: '{integer, object (cross-validation generator),  iterable
                yielding train and tests splits, None'
                name: cross_validation
                optional: 'True'
                path: cv
              - default_value: None
                description: Scoring parameter that is applied to the evaluated estimator.
                kind_of_value: "{callable, None, 'accuracy', 'average_precision', 'f1',\
                \ 'f1_micro', 'f1_macro', 'f1_weighted', 'f1_samples', 'neg_log_loss',\
                \ 'precision', 'recall', 'roc_auc', 'adjusted_mutual_info_score',\
                \ 'adjusted_rand_score', 'completeness_score', 'fowlkes_mallows_score',\
                \ 'homogeneity_score', 'mutual_info_score', 'normalized_mutual_info_score',\
                \ 'v_measure_score', 'explained_variance', 'neg_mean_absolute_error',\
                \ '\u2018neg_mean_squared_error', 'neg_mean_squared_log_error', 'neg_median_absolute_error',\
                \ 'r2'}"
                name: scoring
                optional: 'True'
                path: scoring
              - default_value: '0'
                description: Controls verbosity of output.
                kind_of_value: integer
                name: verbose
                optional: 'False'
                path: verbose
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :feature_selection.SelectFromModel:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: select from model
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: The base estimator from which the transformer is built.
                kind_of_value: estimator object
                name: estimator
                optional: 'False'
                path: estimator
              - default_value: None
                description: The threshold value to use for feature selection.
                kind_of_value: '{''median'', ''mean'', float, None}'
                name: threshold
                optional: 'True'
                path: threshold
              - default_value: 'False'
                description: Whether a prefit model is expected to be passed into the
                  constructor directly or not.
                kind_of_value: boolean
                name: prefit_model
                optional: 'False'
                path: prefit
              - default_value: '1'
                description: Order of the norm used to filter the vectors of coefficients
                  below threshold in the case where the coef_ attribute of the estimator
                  is of dimension 2.
                kind_of_value: non-zero integer
                name: norm_order
                optional: 'False'
                path: norm_order
            optimisation_parameters: []
    :feature_selection.univariate_selection.GenericUnivariateSelect:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: univariate feature selector
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: <function f_classif>
                description: 'Function taking two arrays X and y, and returning a pair
                of arrays (scores, pvalues). '
                kind_of_value: callable
                name: score_function
                optional: 'False'
                path: score_func
              - default_value: '''percentile'''
                description: Feature selection mode.
                kind_of_value: ' {''percentile'', ''k_best'', ''fpr'', ''fdr'', ''fwe''}'
                name: mode
                optional: 'False'
                path: mode
              - default_value: 0,00001
                description: Parameter of the corresponding mode.
                kind_of_value: '{float, integer}'
                name: mode_parameter
                optional: 'False'
                path: param
            optimisation_parameters: []
    :feature_selection.univariate_selection.SelectFdr:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: select estimated false discovery rate
          other_names:
            - select Fdr
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: <function f_classif>
                description: 'Function taking two arrays X and y, and returning a pair
                of arrays (scores, pvalues). '
                kind_of_value: callable
                name: score_function
                optional: 'False'
                path: score_func
              - default_value: '0.05'
                description: The highest uncorrected p-value for features to keep.
                kind_of_value: float
                name: max_uncorrected_p-value
                optional: 'True'
                path: alpha
            optimisation_parameters: []
    :feature_selection.univariate_selection.SelectFpr:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: select below false positive rate
          other_names:
            - select Fpr
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: <function f_classif>
                description: 'Function taking two arrays X and y, and returning a pair
                of arrays (scores, pvalues). '
                kind_of_value: callable
                name: score_function
                optional: 'False'
                path: score_func
              - default_value: '0.05'
                description: The highest uncorrected p-value for features to keep.
                kind_of_value: float
                name: max_uncorrected_p-value
                optional: 'True'
                path: alpha
            optimisation_parameters: []
    :feature_selection.univariate_selection.SelectFwe:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: select familiy-wise error rate
          other_names:
            - select Fwe
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: <function f_classif>
                description: 'Function taking two arrays X and y, and returning a pair
                of arrays (scores, pvalues). '
                kind_of_value: callable
                name: score_function
                optional: 'False'
                path: score_func
              - default_value: '0.05'
                description: The highest uncorrected p-value for features to keep.
                kind_of_value: float
                name: max_uncorrected_p-value
                optional: 'True'
                path: alpha
            optimisation_parameters: []
    :feature_selection.univariate_selection.SelectKBest:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: select k best
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: <function f_classif>
                description: 'Function taking two arrays X and y, and returning a pair
                of arrays (scores, pvalues). '
                kind_of_value: callable
                name: score_function
                optional: 'False'
                path: score_func
              - default_value: '10'
                description: Number of top features to select.
                kind_of_value: '{integer, ''all''}'
                name: k
                optional: 'True'
                path: k
            optimisation_parameters: []
    :feature_selection.univariate_selection.SelectPercentile:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: select percentile
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: <function f_classif>
                description: 'Function taking two arrays X and y, and returning a pair
                of arrays (scores, pvalues). '
                kind_of_value: callable
                name: score_function
                optional: 'False'
                path: score_func
              - default_value: '10'
                description: Percent of features to keep.
                kind_of_value: integer
                name: percentile
                optional: 'True'
                path: percentile
            optimisation_parameters: []
    :feature_selection.variance_threshold.VarianceThreshold:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: variance threshold
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '0.0'
                description: Features with a training-set variance lower than this threshold
                  will be removed.
                kind_of_value: float
                name: threshold
                optional: 'True'
                path: threshold
            optimisation_parameters: []
    :gaussian_process.gpc.GaussianProcessClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: gaussian process classification
          other_names:
            - GPC
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: The kernel specifying the covariance function of the GP.
                kind_of_value: kernel object
                name: kernel
                optional: 'False'
                path: kernel
              - default_value: '''fmin_l_bfgs_b'''
                description: Optimizer to optimize the kernel parameters.
                kind_of_value: '{''fmin_l_bfgs_b'', externally defined optimizer passed
                as a callable }'
                name: kernel_optimizer
                optional: 'True'
                path: optimizer
              - default_value: '0'
                description: The number of restarts of the optimizer for finding the
                  kernel's parameters which maximize the log-marginal likelihood. The
                  first run of the optimizer is performed from the kernel's initial
                  parameters, the remaining ones (if any) from thetas sampled log-uniform
                  randomly from the space of allowed theta-values.
                kind_of_value: integer
                name: n_restarts_optimizer
                optional: 'True'
                path: n_restarts_optimizer
              - default_value: 'False'
                description: When set to True, the solution of the last Newton iteration
                  on the Laplace approximation of the posterior mode is used as initialization
                  for the next call, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: 'True'
                description: If True, a persistent copy of the training data is stored
                  in the object. Otherwise, just a reference to the training data is
                  stored, which might cause predictions to change if the data is modified
                  externally.
                kind_of_value: boolean
                name: copy_X_train
                optional: 'True'
                path: copy_X_train
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '''one_vs_rest'''
                description: Specifies how multi-class classification problems are handled.
                kind_of_value: '{''one_vs_rest'', ''one_vs_one''}'
                name: multi_class
                optional: 'False'
                path: multi_class
            optimisation_parameters:
              - default_value: '100'
                description: "The maximum number of iterations in Newton\u2019s method\
                \ for approximating the posterior during predict. Smaller values will\
                \ reduce computation time at the cost of worse results."
                kind_of_value: integer
                name: max_iter_predict
                optional: 'True'
                path: max_iter_predict
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :gaussian_process.gpr.GaussianProcessRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: gaussian process regression
          other_names:
            - GPR
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: The kernel specifying the covariance function of the GP.
                kind_of_value: kernel object
                name: kernel
                optional: 'False'
                path: kernel
              - default_value: '0.0000000001'
                description: Value added to the diagonal of the kernel matrix during
                  fitting. Larger values correspond to increased noise level in the
                  observations. This can also prevent a potential numerical issue during
                  fitting, by ensuring that the calculated values form a positive definite
                  matrix. If an array is passed, it must have the same number of entries
                  as the data used for fitting and is used as datapoint-dependent noise
                  level. Note that this is equivalent to adding a WhiteKernel with c=alpha.
                  Allowing to specify the noise level directly as a parameter is mainly
                  for convenience and for consistency with Ridge.
                kind_of_value: '{float, array}'
                name: alpha
                optional: 'True'
                path: alpha
              - default_value: '''fmin_l_bfgs_b'''
                description: Optimizer to optimize the kernel parameters.
                kind_of_value: '{''fmin_l_bfgs_b'', externally defined optimizer passed
                as a callable }'
                name: kernel_optimizer
                optional: 'True'
                path: optimizer
              - default_value: '0'
                description: The number of restarts of the optimizer for finding the
                  kernel's parameters which maximize the log-marginal likelihood. The
                  first run of the optimizer is performed from the kernel's initial
                  parameters, the remaining ones (if any) from thetas sampled log-uniform
                  randomly from the space of allowed theta-values.
                kind_of_value: integer
                name: n_restarts_optimizer
                optional: 'True'
                path: n_restarts_optimizer
              - default_value: 'False'
                description: Whether the target values y are normalized, i.e., the mean
                  of the observed target values become zero. This parameter should be
                  set to True if the target values' mean is expected to differ considerable
                  from zero. When enabled, the normalization effectively modifies the
                  GP's prior based on the data, which contradicts the likelihood principle.
                kind_of_value: boolean
                name: normalize_y
                optional: 'True'
                path: normalize_y
              - default_value: 'True'
                description: If True, a persistent copy of the training data is stored
                  in the object. Otherwise, just a reference to the training data is
                  stored, which might cause predictions to change if the data is modified
                  externally.
                kind_of_value: boolean
                name: copy_X_train
                optional: 'True'
                path: copy_X_train
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters: []
    :isotonic.IsotonicRegression:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: isotonic regression
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: If not None, set the lowest value of the fit to min_fit
                kind_of_value: '{float, None}'
                name: min_fit
                optional: 'True'
                path: y_min
              - default_value: None
                description: If not None, set the highest value of the fit to max_fit
                kind_of_value: '{float, None}'
                name: max_fit
                optional: 'True'
                path: y_max
              - default_value: 'True'
                description: "If boolean, whether or not to fit the isotonic regression\
                \ with outputs increasing or decreasing. The string value \u201Cauto\u201D\
                \ determines whether outputs should increase or decrease based on\
                \ the Spearman correlation estimate\u2019s sign."
                kind_of_value: '{''auto'', boolean}'
                name: increasing
                optional: 'True'
                path: increasing
              - default_value: '''nan'''
                description: Defines how input-values outside the training domain should
                  be handled. 'nan' set predictions to NaN, 'clip' set predicted values
                  to the value corresponding to the nearest train interval endpoint.
                  'raise' allows to throw a ValueError.
                kind_of_value: '{''nan, ''clip'', ''raise''}'
                name: out_of_bounds
                optional: 'True'
                path: out_of_bounds
            optimisation_parameters: []
    :kernel_ridge.KernelRidge:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: kernel ridge regression
          other_names:
            - KRR
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Regularization strength; must be a positive float. Regularization
                  improves the conditioning of the problem and reduces the variance
                  of the estimates. Larger values specify stronger regularization. Lambda
                  corresponds to C^-1 in other linear models such as LogisticRegression
                  or LinearSVC.
                kind_of_value: float, array-like in the shape of the targets
                name: regularisation_strength
                optional: 'False'
                path: alpha
              - default_value: '''linear'''
                description: Kernel mapping used internally.
                kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''cosine'',
                ''gaussian'', ''tophat'', ''epanechnikov'', ''exponential'', ''precomputed'',
                callable which accepts two arguments and the keyword arguments passed
                to this object as kernel_params, and should return a floating point
                number.}'
                name: kernel
                optional: 'False'
                path: kernel
              - default_value: None
                description: Gamma parameter for the RBF, laplacian, polynomial, exponential
                  chi2 and sigmoid kernels. Interpretation depends on kernels.
                kind_of_value: float
                name: gamma
                optional: 'False'
                path: gamma
              - default_value: '3.0'
                description: Degree of the polynomial kernel.
                kind_of_value: float
                name: kernel_degree
                optional: 'False'
                path: degree
              - default_value: '1.0'
                description: Zero coefficient for polynomial and sigmoid kernels.
                kind_of_value: float
                name: zero_coefficient
                optional: 'False'
                path: coef0
              - default_value: None
                description: Additional parameters (keyword arguments) for kernel function
                  passed as callable object.
                kind_of_value: mapping of string to any
                name: kernel_parameters
                optional: 'True'
                path: kernel_params
            optimisation_parameters: []
    :linear_model.base.LinearRegression:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: linear regression
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                measurement_scale: nominal
                name: fit_intercept
                optional: 'True'
                path: fit_intercept
                range: '{True, False}'
              - default_value: 'False'
                description: Normalizes the regressors before regression by subtracting
                  the mean and dividing by the l2-norm.
                kind_of_value: boolean
                measurement_scale: nominal
                name: normalize
                optional: 'True'
                path: normalize
                range: '{True, False}'
              - default_value: 'True'
                description: If True, X will be copied; else, it may be overwritten.
                kind_of_value: boolean
                measurement_scale: nominal
                name: copy_X
                optional: 'True'
                path: copy_X
                range: '{True, False}'
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                measurement_scale: ratio
                name: jobs
                optional: 'True'
                path: n_jobs
                range: Z >= -1
        wikidata_id: Q10861030
    :linear_model.bayes.ARDRegression:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: automatic relevance determination regression
          other_names:
            - ARD regrssion
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '0.001'
                description: Precision of the solution. (The tolerance for the optimisation.)
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 1e-06
                description: Shape parameter for the Gamma distribution prior over the
                  alpha parameter.
                kind_of_value: float
                name: alpha_1
                optional: 'True'
                path: alpha_1
              - default_value: 1e-06
                description: Inverse scale parameter (rate parameter) for the Gamma
                  distribution prior over the alpha parameter.
                kind_of_value: float
                name: alpha_2
                optional: 'True'
                path: alpha_2
              - default_value: 1e-06
                description: Shape parameter for the Gamma distribution prior over the
                  lambda parameter.
                kind_of_value: float
                name: lambda_1
                optional: 'True'
                path: lambda_1
              - default_value: 1e-06
                description: Inverse scale parameter (rate parameter) for the Gamma
                  distribution prior over the lambda parameter.
                kind_of_value: float
                name: lambda_2
                optional: 'True'
                path: lambda_2
              - default_value: '10000.0'
                description: Threshold for removing (pruning) weights with high precision
                  from the computation.
                kind_of_value: float
                name: threshold_lambda
                optional: 'True'
                path: threshold_lambda
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'True'
                path: fit_intercept
              - default_value: 'False'
                description: Normalizes the regressors before regression by subtracting
                  the mean and dividing by the l2-norm.
                kind_of_value: boolean
                name: normalize
                optional: 'True'
                path: normalize
              - default_value: 'True'
                description: If True, X will be copied; else, it may be overwritten.
                kind_of_value: boolean
                name: copy_X
                optional: 'True'
                path: copy_X
              - default_value: 'False'
                description: Verbose mode when fitting the model.
                kind_of_value: boolean
                name: verbose
                optional: 'True'
                path: verbose
            optimisation_parameters:
              - default_value: '300'
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: n_iter
              - default_value: 'False'
                description: If True, compute the objective function at each step of
                  the model.
                kind_of_value: boolean
                name: compute_score
                optional: 'True'
                path: compute_score
    :linear_model.bayes.BayesianRidge:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: bayesian ridge regression
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '0.001'
                description: Precision of the solution. (The tolerance for the optimisation.)
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: '0.000006'
                description: Shape parameter for the Gamma distribution prior over the
                  alpha parameter.
                kind_of_value: float
                name: alpha_1
                optional: 'True'
                path: alpha_1
              - default_value: '0.000006'
                description: Inverse scale parameter (rate parameter) for the Gamma
                  distribution prior over the alpha parameter.
                kind_of_value: float
                name: alpha_2
                optional: 'True'
                path: alpha_2
              - default_value: '0.000006'
                description: Shape parameter for the Gamma distribution prior over the
                  lambda parameter.
                kind_of_value: float
                name: lambda_1
                optional: 'True'
                path: lambda_1
              - default_value: '0.000006'
                description: Inverse scale parameter (rate parameter) for the Gamma
                  distribution prior over the lambda parameter.
                kind_of_value: float
                name: lambda_2
                optional: 'True'
                path: lambda_2
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'True'
                path: fit_intercept
              - default_value: 'False'
                description: Normalizes the regressors before regression by subtracting
                  the mean and dividing by the l2-norm.
                kind_of_value: boolean
                name: normalize
                optional: 'True'
                path: normalize
              - default_value: 'True'
                description: If True, X will be copied; else, it may be overwritten.
                kind_of_value: boolean
                name: copy_X
                optional: 'True'
                path: copy_X
              - default_value: 'False'
                description: Verbose mode when fitting the model.
                kind_of_value: boolean
                name: verbose
                optional: 'True'
                path: verbose
            optimisation_parameters:
              - default_value: '300'
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: n_iter
              - default_value: 'False'
                description: If True, compute the objective function at each step of
                  the model.
                kind_of_value: boolean
                name: compute_score
                optional: 'True'
                path: compute_score
    :linear_model.coordinate_descent.ElasticNet:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: elastic net
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Constant that multiplies the L1/L2 term.
                kind_of_value: float
                name: l1_l2_multiplier
                optional: 'True'
                path: alpha
              - default_value: '0.5'
                description: The ElasticNet mixing parameter, with 0 <= l1_ratio <=
                  1. For l1_ratio = 0 the penalty is an L2 penalty. For l1_ratio = 1
                  it is an L1 penalty. For 0 < l1_ratio < 1, the penalty is a combination
                  of L1 and L2.
                kind_of_value: float
                name: l1_ratio
                optional: 'False'
                path: l1_ratio
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
              - default_value: 'False'
                description: Normalizes the regressors before regression by subtracting
                  the mean and dividing by the I2-norm.
                kind_of_value: boolean
                name: normalize
                optional: 'True'
                path: normalize
              - default_value: 'True'
                description: If True, X will be copied; else, it may be overwritten.
                kind_of_value: boolean
                name: copy_X
                optional: 'True'
                path: copy_X
              - default_value: '0.0001'
                description: 'The tolerance for the optimization: if the updates are
                smaller than tol, the optimization code checks the dual gap for optimality
                and continues until it is smaller than tol.'
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: 'False'
                description: When set to True, forces the coefficients to be positive.
                kind_of_value: boolean
                name: positive_coef
                optional: 'True'
                path: positive
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '''cyclic'''
                description: If set to 'random', a random coefficient is updated every
                  iteration rather than looping over features sequentially by default.
                kind_of_value: '{''random'', ''cyclic''}'
                name: selection
                optional: 'False'
                path: selection
            optimisation_parameters:
              - default_value: 'False'
                description: Whether to use a precomputed Gram matrix to speed up calculations.
                  The Gram matrix can also be passed as argument.
                kind_of_value: '{boolean, array-like, ''auto''}'
                name: precompute
                optional: 'False'
                path: precompute
              - default_value: None
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :linear_model.coordinate_descent.Lasso:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: lasso
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Constant that multiplies the L1 term.
                kind_of_value: float
                name: l1_multiplier
                optional: 'True'
                path: alpha
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
              - default_value: 'False'
                description: Normalizes the regressors before regression by subtracting
                  the mean and dividing by the I2-norm.
                kind_of_value: boolean
                name: normalize
                optional: 'True'
                path: normalize
              - default_value: 'True'
                description: If True, X will be copied; else, it may be overwritten.
                kind_of_value: boolean
                name: copy_X
                optional: 'True'
                path: copy_X
              - default_value: '0.0001'
                description: 'The tolerance for the optimization: if the updates are
                smaller than tolerance, the optimization code checks the dual gap
                for optimality and continues until it is smaller than tol.'
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: 'False'
                description: When set to True, forces the coefficients to be positive.
                kind_of_value: boolean
                name: positive_coef
                optional: 'True'
                path: positive
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '''cyclic'''
                description: If set to 'random', a random coefficient is updated every
                  iteration rather than looping over features sequentially by default.
                kind_of_value: '{''cyclic'', ''random''}'
                name: selection
                optional: 'False'
                path: selection
            optimisation_parameters:
              - default_value: None
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
              - default_value: 'False'
                description: Whether to use a precomputed Gram matrix to speed up calculations.
                  The Gram matrix can also be passed as argument.
                kind_of_value: '{boolean, array-like, ''auto''}'
                name: precompute
                optional: 'False'
                path: precompute
    :linear_model.coordinate_descent.MultiTaskElasticNet:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: multi-task elastic net
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Constant that multiplies the L1/L2 term.
                kind_of_value: float
                name: l1_l2_multiplier
                optional: 'True'
                path: alpha
              - default_value: '0.5'
                description: The ElasticNet mixing parameter, with 0 <= l1_ratio <=
                  1. For l1_ratio = 0 the penalty is an L2 penalty. For l1_ratio = 1
                  it is an L1 penalty. For 0 < l1_ratio < 1, the penalty is a combination
                  of L1 and L2.
                kind_of_value: float
                name: l1_ratio
                optional: 'False'
                path: l1_ratio
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
              - default_value: 'False'
                description: Normalizes the regressors before regression by subtracting
                  the mean and dividing by the I2-norm.
                kind_of_value: boolean
                name: normalize
                optional: 'True'
                path: normalize
              - default_value: 'True'
                description: If True, X will be copied; else, it may be overwritten.
                kind_of_value: boolean
                name: copy_X
                optional: 'True'
                path: copy_X
              - default_value: '0.0001'
                description: 'The tolerance for the optimization: if the updates are
                smaller than tol, the optimization code checks the dual gap for optimality
                and continues until it is smaller than tol.'
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '''cyclic'''
                description: If set to 'random', a random coefficient is updated every
                  iteration rather than looping over features sequentially by default.
                kind_of_value: '{''random'', ''cyclic''}'
                name: selection
                optional: 'False'
                path: selection
            optimisation_parameters:
              - default_value: None
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :linear_model.coordinate_descent.MultiTaskLasso:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: multi-task lasso
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Constant that multiplies the L1/L2 term.
                kind_of_value: float
                name: l1_l2_multiplier
                optional: 'True'
                path: alpha
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
              - default_value: 'False'
                description: Normalizes the regressors before regression by subtracting
                  the mean and dividing by the I2-norm.
                kind_of_value: boolean
                name: normalize
                optional: 'True'
                path: normalize
              - default_value: 'True'
                description: If True, X will be copied; else, it may be overwritten.
                kind_of_value: boolean
                name: copy_X
                optional: 'True'
                path: copy_X
              - default_value: '0.0001'
                description: 'The tolerance for the optimization: if the updates are
                smaller than tol, the optimization code checks the dual gap for optimality
                and continues until it is smaller than tol.'
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '''cyclic'''
                description: If set to 'random', a random coefficient is updated every
                  iteration rather than looping over features sequentially by default.
                kind_of_value: '{''random'', ''cyclic''}'
                name: selection
                optional: 'False'
                path: selection
            optimisation_parameters:
              - default_value: None
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :linear_model.huber.HuberRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: huber regressor
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.35'
                description: The parameter controls the number of samples that should
                  be classified as outliers. The smaller the parameter, the more robust
                  it is to outliers.
                kind_of_value: float > 1.0
                name: number_of_outliers
                optional: 'False'
                path: epsilon
              - default_value: '0.0001'
                description: Regularization parameter.
                kind_of_value: float
                name: regularization_parameter
                optional: 'False'
                path: alpha
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'False'
                path: warm_start
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'True'
                path: fit_intercept
              - default_value: 1e-05
                description: The stopping criterion.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
            optimisation_parameters:
              - default_value: '100'
                description: Maximum number of iterations that scipy.optimize.fmin_l_bfgs_b
                  should run for.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
    :linear_model.least_angle.Lars:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: least angle regression
          other_names:
            - LARS
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
              - default_value: 'False'
                description: Normalizes the regressors before regression by subtracting
                  the mean and dividing by the I2-norm.
                kind_of_value: boolean
                name: normalize
                optional: 'True'
                path: normalize
              - default_value: '500'
                description: Target number of non-zero coefficients.
                kind_of_value: integer
                name: nonzero_coefficients
                optional: 'True'
                path: n_nonzero_coefs
              - default_value: '2.2204460492503131e-16'
                description: The machine-precision regularization in the computation
                  of the Cholesky diagonal factors. Increase this for very ill-conditioned
                  systems.
                kind_of_value: float
                name: eps
                optional: 'True'
                path: eps
              - default_value: 'True'
                description: If True, X will be copied; else, it may be overwritten.
                kind_of_value: boolean
                name: copy_X
                optional: 'True'
                path: copy_X
              - default_value: 'False'
                description: When set to True, forces the coefficients to be positive.
                kind_of_value: boolean
                name: positive_coef
                optional: 'True'
                path: positive
            optimisation_parameters:
              - default_value: 'False'
                description: Whether to use a precomputed Gram matrix to speed up calculations.
                  The Gram matrix can also be passed as argument.
                kind_of_value: '{boolean, array-like, ''auto''}'
                name: precompute
                optional: 'False'
                path: precompute
              - default_value: 'True'
                description: If True the full path is stored in the coef_path_ attribute.
                  If you compute the solution for a large problem or many targets, setting
                  fit_path to False will lead to a speedup, especially with a small
                  alpha.
                kind_of_value: boolean
                name: fit_path
                optional: 'False'
                path: fit_path
    :linear_model.least_angle.LassoLars:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: lasso least angle regression
          other_names:
            - LassoLars
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Constant that multiplies the penalty term.
                kind_of_value: float
                name: penalty_multiplier
                optional: 'True'
                path: alpha
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
              - default_value: 'False'
                description: Sets the verbosity amount.
                kind_of_value: '{boolean, integer}'
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'False'
                description: Normalizes the regressors before regression by subtracting
                  the mean and dividing by the I2-norm.
                kind_of_value: boolean
                name: normalize
                optional: 'True'
                path: normalize
              - default_value: '2.2204460492503131e-16'
                description: The machine-precision regularization in the computation
                  of the Cholesky diagonal factors. Increase this for very ill-conditioned
                  systems.
                kind_of_value: float
                name: eps
                optional: 'True'
                path: eps
              - default_value: 'True'
                description: If True, X will be copied; else, it may be overwritten.
                kind_of_value: boolean
                name: copy_X
                optional: 'True'
                path: copy_X
              - default_value: 'False'
                description: When set to True, forces the coefficients to be positive.
                kind_of_value: boolean
                name: positive_coef
                optional: 'True'
                path: positive
            optimisation_parameters:
              - default_value: '''auto'''
                description: Whether to use a precomputed Gram matrix to speed up calculations.
                  The Gram matrix can also be passed as argument.
                kind_of_value: '{True, False, ''auto''}'
                name: precompute
                optional: 'False'
                path: precompute
              - default_value: None
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
              - default_value: 'True'
                description: If True the full path is stored in the coef_path_ attribute.
                  If you compute the solution for a large problem or many targets, setting
                  fit_path to False will lead to a speedup, especially with a small
                  alpha.
                kind_of_value: boolean
                name: fit_path
                optional: 'False'
                path: fit_path
    :linear_model.logistic.LogisticRegression:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: logistic regression
          other_names:
            - logit regression
            - maximum-entropy classification
            - MaxEnt
            - log-linear classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '''l2'''
                description: Used to specify the norm used in the penalization.
                kind_of_value: '{l1, l2}'
                name: penalty_norm
                optional: 'False'
                path: penalty
              - default_value: 'False'
                description: Dual or primal formulation.
                kind_of_value: boolean
                name: dual
                optional: 'False'
                path: dual
              - default_value: '0.0001'
                description: Tolerance for stopping criteria.
                kind_of_value: float
                name: tolerance
                optional: 'False'
                path: tol
              - default_value: '1.0'
                description: Inverse of regularization strength; must be a positive
                  float. Like in support vector machines, smaller values specify stronger
                  regularization.
                kind_of_value: float
                name: inverse_regularisation_strength
                optional: 'False'
                path: C
              - default_value: 'True'
                description: Specifies if a constant (a.k.a. bias or intercept) should
                  be added to the decision function.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
              - default_value: '1'
                description: "Useful only when the solver \u2018liblinear\u2019 is used\
                \ and self.fit_intercept is set to True. In this case, x becomes [x,\
                \ self.intercept_scaling], i.e. a \u201Csynthetic\u201D feature with\
                \ constant value equal to intercept_scaling is appended to the instance\
                \ vector. The intercept becomes intercept_scaling * synthetic_feature_weight."
                kind_of_value: float
                name: intercept_scaling
                optional: 'False'
                path: intercept_scaling
              - default_value: None
                description: Weights associated with classes.
                kind_of_value: '{dict, ''balanced'', None}'
                name: class_weight
                optional: 'False'
                path: class_weight
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '''liblinear'''
                description: Solver to use in the computational routines.
                kind_of_value: '{''newton-cg'', ''lbfgs'', ''liblinear'', ''sag'', ''saga''}'
                name: solver
                optional: 'False'
                path: solver
              - default_value: '''ovr'''
                description: "If the option chosen is \u2018ovr\u2019, then a binary\
                \ problem is fit for each label. Else the loss minimised is the multinomial\
                \ loss fit across the entire probability distribution."
                kind_of_value: '{''ovr'', ''multinomial''}'
                name: multi_class
                optional: 'False'
                path: multi_class
              - default_value: '0'
                description: For the liblinear and lbfgs solvers set verbose to any
                  positive number for verbosity.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
            optimisation_parameters:
              - default_value: '100'
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'False'
                path: warm_start
              - default_value: '1'
                description: Number of CPU cores used when parallelizing over classes.
                kind_of_value: integer
                name: jobs
                optional: 'False'
                path: n_jobs
    :linear_model.omp.OrthogonalMatchingPursuit:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: orthogonal matching pursuit model
          other_names:
            - OMP
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Target number of non-zero coefficients.
                kind_of_value: integer
                name: nonzero_coef
                optional: 'True'
                path: n_nonzero_coefs
              - default_value: None
                description: Maximum norm of the residual.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'True'
                path: fit_intercept
              - default_value: 'True'
                description: Normalizes the regressors before regression by subtracting
                  the mean and dividing by the l2-norm.
                kind_of_value: boolean
                name: normalize
                optional: 'True'
                path: normalize
            optimisation_parameters:
              - default_value: '''auto'''
                description: Whether to use a precomputed Gram matrix  and Xy matrix
                  to speed up calculations. Matrices can also be directly passed to
                  the fit method.
                kind_of_value: '{boolean, ''auto''}'
                name: precompute
                optional: 'False'
                path: precompute
    :linear_model.orthogonal_mp:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: n-target orthogonal matching pursuit
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: Input data. Columns are assumed to have unit norm.
                kind_of_value: array, shape (n_samples, n_features)
                name: feature_matrix
                optional: 'False'
                path: X
              - default_value: ''
                description: Input targets
                kind_of_value: array, shape (n_samples) or (n_samples, n_targets)
                name: input_targets
                optional: 'False'
                path: Y
              - default_value: None
                description: Target number of non-zero coefficients.
                kind_of_value: integer
                name: nonzero_coefficients
                optional: 'False'
                path: n_nonzero_coefs
              - default_value: None
                description: Maximum norm of the residual.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'True'
                description: If True, X will be copied; else, it may be overwritten.
                kind_of_value: boolean
                name: copy_X
                optional: 'True'
                path: copy_X
              - default_value: 'False'
                description: Whether to return every value of the nonzero coefficients
                  along the forward path. Useful for cross-validation.
                kind_of_value: boolean
                name: return_path
                optional: 'True'
                path: return_path
              - default_value: 'False'
                description: Whether or not to return the number of iterations.
                kind_of_value: boolean
                name: return_n_iter
                optional: 'True'
                path: return_n_iter
            optimisation_parameters:
              - default_value: '''auto'''
                description: Whether to perform precomputations.
                kind_of_value: '{True, False, ''auto''}'
                name: precompute
                optional: 'False'
                path: precompute
    :linear_model.passive_aggressive.PassiveAggressiveClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: passive aggressive classifier
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Maximum step size (regularization).
                kind_of_value: float
                name: regualrisation
                optional: 'False'
                path: C
              - default_value: 'True'
                description: Whether the intercept should be estimated or not.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
              - default_value: None
                description: The stopping criterion.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'True'
                description: Whether or not the training data should be shuffled after
                  each epoch.
                kind_of_value: boolean
                name: shuffle
                optional: 'True'
                path: shuffle
              - default_value: '0'
                description: The verbosity level.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: '''hinge'''
                description: The loss function to be used.
                kind_of_value: '{''hinge'', ''squared_hinge''}'
                name: loss_function
                optional: 'True'
                path: loss
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: None
                description: Weights associated with classes.
                kind_of_value: '{dict,''balanced'', None}'
                name: class_weight
                optional: 'True'
                path: class_weight
              - default_value: 'False'
                description: When set to True, computes the averaged SGD weights and
                  stores the result in the coef_ attribute. If set to an int greater
                  than 1, averaging will begin once the total number of samples seen
                  reaches average. So average=10 will begin averaging after seeing 10
                  samples.
                kind_of_value: '{boolean, integer}'
                name: average
                optional: 'True'
                path: average
            optimisation_parameters:
              - default_value: None
                description: The maximum number of passes over the training data (aka
                  epochs).
                kind_of_value: integer
                name: epochs
                optional: 'True'
                path: max_iter
              - default_value: '1'
                description: The number of of CPUs to use for the computation. If -1
                  all CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :linear_model.passive_aggressive.PassiveAggressiveRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: passive aggressive regressor
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Maximum step size (regularization).
                kind_of_value: float
                name: regualrisation
                optional: 'False'
                path: C
              - default_value: 'True'
                description: Whether the intercept should be estimated or not.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
              - default_value: None
                description: The stopping criterion.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'True'
                description: Whether or not the training data should be shuffled after
                  each epoch.
                kind_of_value: boolean
                name: shuffle
                optional: 'True'
                path: shuffle
              - default_value: '0'
                description: The verbosity level.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: '''epsilon_insensitive'''
                description: The loss function to be used.
                kind_of_value: '{''epsilon_insensitive'', ''squared_epsilon_insensitive''}'
                name: loss_function
                optional: 'True'
                path: loss
              - default_value: '0.1'
                description: If the difference between the current prediction and the
                  correct label is below this threshold, the model is not updated.
                kind_of_value: float
                name: update_threshold
                optional: 'False'
                path: epsilon
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: 'False'
                description: When set to True, computes the averaged SGD weights and
                  stores the result in the coef_ attribute. If set to an int greater
                  than 1, averaging will begin once the total number of samples seen
                  reaches average. So average=10 will begin averaging after seeing 10
                  samples.
                kind_of_value: '{boolean, integer}'
                name: average
                optional: 'True'
                path: average
            optimisation_parameters:
              - default_value: None
                description: The maximum number of passes over the training data (aka
                  epochs).
                kind_of_value: integer
                name: epochs
                optional: 'True'
                path: max_iter
    :linear_model.perceptron.Perceptron:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: perceptron
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: The penalty (aka regularization term) to be used.
                kind_of_value: '{none, ''l2'', ''l1'', ''elasticnet''}'
                name: regularization_term
                optional: 'False'
                path: penalty
              - default_value: '0.0001'
                description: Constant that multiplies the regularization term.
                kind_of_value: float
                name: regularisation_multiplier
                optional: 'False'
                path: alpha
              - default_value: 'True'
                description: Whether the intercept should be estimated or not.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
              - default_value: None
                description: The stopping criterion.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'True'
                description: Whether or not the training data should be shuffled after
                  each epoch.
                kind_of_value: boolean
                name: shuffle
                optional: 'True'
                path: shuffle
              - default_value: '0'
                description: The verbosity level.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: '1.0'
                description: The initial learning rate for the 'constant' or 'invscaling'
                  schedules.
                kind_of_value: double
                name: eta0
                optional: 'False'
                path: eta0
              - default_value: None
                description: Weights associated with classes.
                kind_of_value: '{{class_label: weight}, ''balanced'',  None}'
                name: class_weight
                optional: 'True'
                path: class_weight
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
            optimisation_parameters:
              - default_value: None
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
    :linear_model.ransac.RANSACRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: random sample consensus regressor
          other_names:
            - RANSAC
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: base_estimator.
                kind_of_value: '{object, None}'
                name: base_estimator
                optional: 'True'
                path: base_estimator
              - default_value: None
                description: Minimum number of samples chosen randomly from original
                  data.
                kind_of_value: '[int (>= 1), float ([0, 1])}'
                name: min_samples
                optional: 'True'
                path: min_samples
              - default_value: None
                description: Maximum residual for a data sample to be classified as
                  an inlier. By default the threshold is chosen as the MAD (median absolute
                  deviation) of the target values y.
                kind_of_value: float
                name: residual_threshold
                optional: 'True'
                path: residual_threshold
              - default_value: None
                description: 'This function is called with the randomly selected data
                before the model is fitted to it: is_data_valid(X, y). If its return
                value is False the current randomly chosen sub-sample is skipped.'
                kind_of_value: callable
                name: is_data_valid
                optional: 'True'
                path: is_data_valid
              - default_value: None
                description: 'This function is called with the estimated model and the
                randomly selected data: is_model_valid(model, X, y). If its return
                value is False the current randomly chosen sub-sample is skipped.
                Rejecting samples with this function is computationally costlier than
                with is_data_valid. is_model_valid should therefore only be used if
                the estimated model is needed for making the rejection decision..'
                kind_of_value: callable
                name: is_model_valid
                optional: 'True'
                path: is_model_valid
              - default_value: absolute_loss
                description: If loss is a callable, then it should be a function that
                  takes two arrays as inputs, the true and predicted value and returns
                  a 1-D array with the i-th value of the array corresponding to the
                  loss on X[i].
                kind_of_value: '{''absolute_loss'', ''squared_loss''}'
                name: loss
                optional: 'True'
                path: loss
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '100'
                description: Maximum number of iterations for random sample selection.
                kind_of_value: integer
                name: iterations_random_sampling
                optional: 'True'
                path: max_trials
              - default_value: inf
                description: Maximum number of iterations that can be skipped due to
                  finding zero inliers or invalid data.
                kind_of_value: integer
                name: max_skips
                optional: 'True'
                path: max_skips
              - default_value: inf
                description: Stop iteration if at least this number of inliers are found.
                kind_of_value: integer
                name: stop_n_inliers
                optional: 'True'
                path: stop_n_inliers
              - default_value: inf
                description: Stop iteration if score is greater equal than this threshold.
                kind_of_value: float
                name: stop_score
                optional: 'True'
                path: stop_score
              - default_value: '0.99'
                description: RANSAC iteration stops if at least one outlier-free set
                  of the training data is sampled in RANSAC.
                kind_of_value: float in range [0,1]
                name: stop_probability
                optional: 'True'
                path: stop_probability
    :linear_model.ridge.Ridge:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: ridge regression
          other_names:
            - Tikhonov regularization
            - weight decay
            - "Tikhonov\u2013Miller method"
            - "Phillips\u2013Twomey method"
            - constrained linear inversion
            - linear regularization
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Regularization strength. Regularization improves the conditioning
                  of the problem and reduces the variance of the estimates. Larger values
                  specify stronger regularization.
                kind_of_value: float, array-like in the shape of the targets
                name: regularisation_strength
                optional: 'False'
                path: alpha
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
              - default_value: 'False'
                description: Normalizes the regressors before regression by subtracting
                  the mean and dividing by the l2-norm.
                kind_of_value: boolean
                name: normalize
                optional: 'True'
                path: normalize
              - default_value: 'True'
                description: If True, X will be copied; else, it may be overwritten.
                kind_of_value: boolean
                name: copy_X
                optional: 'True'
                path: copy_X
              - default_value: '0.001'
                description: Precision of the solution. (The tolerance for the optimisation.)
                kind_of_value: float
                name: tolerance
                optional: 'False'
                path: tol
              - default_value: '''auto'''
                description: Solver to use in the computational routines.
                kind_of_value: string
                measurement_scale: nominal
                name: solver
                optional: 'False'
                path: solver
                range: '{''auto'', ''svd'', ''cholesky'', ''lsqr'', ''sparse_cg'', ''sag'',
                ''saga''}'
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: None
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :linear_model.stochastic_gradient.SGDClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: stochastic gradient descent classifier
          other_names:
            - SGD classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '''hinge'''
                description: The loss function to be used.
                kind_of_value: '{''hinge'', ''log'', ''modified_huber'', ''squared_hinge'',
                ''perceptron'', ''squared_loss'', ''huber'', ''epsilon_insensitive'',
                ''squared_epsilon_insensitive''}'
                name: loss_function
                optional: 'False'
                path: loss
              - default_value: '''l2'''
                description: The penalty (aka regularization term) to be used.
                kind_of_value: '{''none'', ''l2'', ''l1'', ''elasticnet''}'
                name: regularization_term
                optional: 'False'
                path: penalty
              - default_value: '0.0001'
                description: Constant that multiplies the regularization term.
                kind_of_value: float
                name: regualrisation_multiplier
                optional: 'False'
                path: alpha
              - default_value: '0.15'
                description: The Elastic Net mixing parameter.
                kind_of_value: float
                name: l1_ratio
                optional: 'False'
                path: l1_ratio
              - default_value: 'True'
                description: Whether the intercept should be estimated or not.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
              - default_value: None
                description: The stopping criterion.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'True'
                description: Whether or not the training data should be shuffled after
                  each epoch.
                kind_of_value: boolean
                name: shuffle
                optional: 'True'
                path: shuffle
              - default_value: '0'
                description: The verbosity level.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: '0.1'
                description: "For \u2018huber\u2019, determines the threshold at which\
                \ it becomes less important to get the prediction exactly right. For\
                \ epsilon-insensitive, any differences between the current prediction\
                \ and the correct label are ignored if they are less than this threshold."
                kind_of_value: float
                name: epsilon
                optional: 'False'
                path: epsilon
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: optimal
                description: Where t0 is chosen by a heuristic proposed by Leon Bottou.
                kind_of_value: '{constant, optimal, invscaling}'
                name: learning_rate
                optional: 'True'
                path: learning_rate
              - default_value: '0.0'
                description: The initial learning rate for the 'constant' or 'invscaling'
                  schedules.
                kind_of_value: double
                name: eta0
                optional: 'False'
                path: eta0
              - default_value: '0.5'
                description: The exponent for inverse scaling learning rate.
                kind_of_value: double
                name: inverse_scaling_exponent
                optional: 'False'
                path: power_t
              - default_value: None
                description: Weights associated with classes.
                kind_of_value: '{{class_label: weight}, ''balanced'',  None}'
                name: class_weight
                optional: 'True'
                path: class_weight
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: None
                description: The stopping criterion.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'False'
                description: When set to True, computes the averaged SGD weights and
                  stores the result in the coef_ attribute. If set to an int greater
                  than 1, averaging will begin once the total number of samples seen
                  reaches average. So average=10 will begin averaging after seeing 10
                  samples.
                kind_of_value: '{boolean, integer}'
                name: average
                optional: 'True'
                path: average
            optimisation_parameters:
              - default_value: None
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
              - default_value: '1'
                description: The number of CPUs to use to do the OVA (One Versus All,
                  for multi-class problems) computation. -1 means 'all CPUs'.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
              - default_value: 'True'
                description: Whether the intercept should be estimated or not.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
    :linear_model.stochastic_gradient.SGDRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: stochastic gradient descent regressor
          other_names:
            - SGD regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '''squared_loss'''
                description: The loss function to be used.
                kind_of_value: '{''squared_loss'', ''huber'', ''epsilon_insensitive'',
                ''squared_epsilon_insensitive''}'
                name: loss_function
                optional: 'False'
                path: loss
              - default_value: '''l2'''
                description: The penalty (aka regularization term) to be used.
                kind_of_value: '{''none'', ''l2'', ''l1'', ''elasticnet''}'
                name: regularization_term
                optional: 'False'
                path: penalty
              - default_value: '0.0001'
                description: Constant that multiplies the regularization term.
                kind_of_value: float
                name: regualrisation_multiplier
                optional: 'False'
                path: alpha
              - default_value: '0.15'
                description: The Elastic Net mixing parameter.
                kind_of_value: float
                name: l1_ratio
                optional: 'False'
                path: l1_ratio
              - default_value: 'True'
                description: Whether the intercept should be estimated or not.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'False'
                path: fit_intercept
              - default_value: None
                description: The stopping criterion.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'True'
                description: Whether or not the training data should be shuffled after
                  each epoch.
                kind_of_value: boolean
                name: shuffle
                optional: 'True'
                path: shuffle
              - default_value: '0'
                description: The verbosity level.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: '0.1'
                description: "For \u2018huber\u2019, determines the threshold at which\
                \ it becomes less important to get the prediction exactly right. For\
                \ epsilon-insensitive, any differences between the current prediction\
                \ and the correct label are ignored if they are less than this threshold."
                kind_of_value: float
                name: epsilon
                optional: 'False'
                path: epsilon
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '''invscaling'''
                description: where t0 is chosen by a heuristic proposed by Leon Bottou.
                kind_of_value: '{''constant'', ''optimal'', ''invscaling''}'
                name: learning_rate
                optional: 'True'
                path: learning_rate
              - default_value: '0.01'
                description: The initial learning rate for the 'constant' or 'invscaling'
                  schedules.
                kind_of_value: double
                name: eta0
                optional: 'False'
                path: eta0
              - default_value: '0.25'
                description: The exponent for inverse scaling learning rate.
                kind_of_value: double
                name: inverse_scaling_exponent
                optional: 'False'
                path: power_t
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: 'False'
                description: When set to True, computes the averaged SGD weights and
                  stores the result in the coef_ attribute. If set to an int greater
                  than 1, averaging will begin once the total number of samples seen
                  reaches average. So average=10 will begin averaging after seeing 10
                  samples.
                kind_of_value: '{boolean, integer}'
                name: average
                optional: 'True'
                path: average
            optimisation_parameters:
              - default_value: None
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :linear_model.theil_sen.TheilSenRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: theil-sen estimator
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'True'
                path: fit_intercept
              - default_value: 'True'
                description: If True, X will be copied; else, it may be overwritten.
                kind_of_value: boolean
                name: copy_X
                optional: 'True'
                path: copy_X
              - default_value: '10000'
                description: "Instead of computing with a set of cardinality \u2018\
                n choose k\u2019, where n is the number of samples and k is the number\
                \ of subsamples (at least number of features), consider only a stochastic\
                \ subpopulation of a given maximal size if \u2018n choose k\u2019\
                \ is larger than max_subpopulation. For other than small problem sizes\
                \ this parameter will determine memory usage and runtime if n_subsamples\
                \ is not changed."
                kind_of_value: integer
                name: max_subpopulation
                optional: 'True'
                path: max_subpopulation
              - default_value: None
                description: Number of samples to calculate the parameters.
                kind_of_value: integer
                name: num_subsamples
                optional: 'True'
                path: n_subsamples
              - default_value: '0.001'
                description: Tolerance when calculating spatial median.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: 'False'
                description: Verbose mode when fitting the model.
                kind_of_value: boolean
                name: verbose
                optional: 'True'
                path: verbose
            optimisation_parameters:
              - default_value: '300'
                description: Maximum number of iterations for the calculation of spatial
                  median.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
              - default_value: '1'
                description: The number of CPUs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :manifold.isomap.Isomap:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: isomap embedding
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '5'
                description: Number of neighbors to consider for each point.
                kind_of_value: integer
                name: num_neighbours
                optional: 'False'
                path: n_neighbors
              - default_value: '2'
                description: Number of coordinates for the manifold.
                kind_of_value: integer
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: '''auto'''
                description: Solver for the eigenvalue decomposition.
                kind_of_value: '{''auto'', ''arpack'', ''dense'']'
                name: eigen_solver
                optional: 'False'
                path: eigen_solver
              - default_value: '0'
                description: Tolerance passed to the eigenvalue decomposition solver
                kind_of_value: float
                name: tolerance
                optional: 'False'
                path: tol
              - default_value: '''auto'''
                description: "Method to use in finding shortest path. 'auto' : attempt\
                \ to choose the best algorithm automatically. 'FW' : Floyd-Warshall\
                \ algorithm. 'D' : Dijkstra\u2019s algorithm."
                kind_of_value: '{''auto'', ''FW'', ''D''}'
                name: path_method
                optional: 'False'
                path: path_method
              - default_value: '''auto'''
                description: Algorithm to use for nearest neighbors search, passed to
                  neighbors. NearestNeighbors instance.
                kind_of_value: '{''auto'', ''brute'', ''kd_tree'', ''ball_tree''}'
                name: neighbors_algorithm
                optional: 'False'
                path: neighbors_algorithm
            optimisation_parameters:
              - default_value: None
                description: Maximum number of iterations for eigenvalue decomposition
                  solver.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :manifold.locally_linear.LocallyLinearEmbedding:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: object oriented locally linear embedding analysis
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '5'
                description: Number of neighbors to consider for each point.
                kind_of_value: integer
                name: num_neighbours
                optional: 'False'
                path: n_neighbors
              - default_value: '2'
                description: Number of coordinates for the manifold.
                kind_of_value: integer
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: '0.001'
                description: Regularization constant, multiplies the trace of the local
                  covariance matrix of the distances.
                kind_of_value: float
                name: regularization_constant
                optional: 'False'
                path: reg
              - default_value: '''auto'''
                description: Solver for the eigenvalue decomposition.
                kind_of_value: '{''auto'', ''arpack'', ''dense'']'
                name: eigen_solver
                optional: 'False'
                path: eigen_solver
              - default_value: '0.000001'
                description: Tolerance passed to the eigenvalue decomposition solver
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: '''standard'''
                description: Embedding method.
                kind_of_value: '{''standard'', ''hessian'', ''modified'', ''ltsa''}'
                name: embedding_method
                optional: 'False'
                path: method
              - default_value: '0.0001'
                description: Tolerance for Hessian eigenmapping method.
                kind_of_value: float
                name: hessian_tol
                optional: 'True'
                path: hessian_tol
              - default_value: '0.000000000001'
                description: Tolerance for modified LLE method.
                kind_of_value: float
                name: modified_tol
                optional: 'True'
                path: modified_tol
              - default_value: '''auto'''
                description: Algorithm to use for nearest neighbors search, passed to
                  neighbors.NearestNeighbors instance.
                kind_of_value: '{''auto'', ''brute'', ''kd_tree'', ''ball_tree''}'
                name: neighbors_algorithm
                optional: 'False'
                path: neighbors_algorithm
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '100'
                description: Maximum number of iterations for eigenvalue decomposition
                  solver.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :manifold.locally_linear_embedding:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: locally linear embedding analysis
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: Sample data.
                kind_of_value: '{array-like shape (n_samples, n_features), sparse matrix,
                BallTree, KDTree, NearestNeighbors}'
                name: sample_data
                optional: 'False'
                path: X
              - default_value: ''
                description: Number of neighbors to consider for each point.
                kind_of_value: integer
                name: num_neighbours
                optional: 'False'
                path: n_neighbors
              - default_value: ''
                description: Number of coordinates for the manifold.
                kind_of_value: integer
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: '0.001'
                description: Regularization constant, multiplies the trace of the local
                  covariance matrix of the distances.
                kind_of_value: float
                name: regularization_constant
                optional: 'False'
                path: reg
              - default_value: '''auto'''
                description: Solver for the eigenvalue decomposition.
                kind_of_value: '{''auto'', ''arpack'', ''dense'']'
                name: eigen_solver
                optional: 'False'
                path: eigen_solver
              - default_value: '0.000001'
                description: Tolerance passed to the eigenvalue decomposition solver
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: '''standard'''
                description: Embedding method.
                kind_of_value: '{''standard'', ''hessian'', ''modified'', ''ltsa''}'
                name: embedding_method
                optional: 'False'
                path: method
              - default_value: '0.0001'
                description: Tolerance for Hessian eigenmapping method.
                kind_of_value: float
                name: hessian_tol
                optional: 'True'
                path: hessian_tol
              - default_value: '0.000000000001'
                description: Tolerance for modified LLE method.
                kind_of_value: float
                name: modified_tol
                optional: 'True'
                path: modified_tol
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '100'
                description: Maximum number of iterations for eigenvalue decomposition
                  solver.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :manifold.mds.MDS:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: multidimensional scaling
          other_names:
            - MDS
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '2'
                description: Number of coordinates for the manifold.
                kind_of_value: integer
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: 'True'
                description: If True, perform metric MDS; otherwise, perform nonmetric
                  MDS.
                kind_of_value: boolean
                name: metric_MDS
                optional: 'True'
                path: metric
              - default_value: '0'
                description: Level of verbosity.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: '0.001'
                description: Relative tolerance with respect to stress at which to declare
                  convergence.
                kind_of_value: float
                name: eps
                optional: 'True'
                path: eps
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '''euclidean'''
                description: Dissimilarity measure to use.
                kind_of_value: '{''euclidean'', ''precomputed''}'
                name: dissimilarity
                optional: 'True'
                path: dissimilarity
            optimisation_parameters:
              - default_value: '300'
                description: Maximum number of iterations of the SMACOF algorithm for
                  a single run.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
              - default_value: '4'
                description: Number of times the SMACOF algorithm will be run with different
                  initializations. The final results will be the best output of the
                  runs, determined by the run with the smallest final stress.
                kind_of_value: integer
                name: num_initializations
                optional: 'True'
                path: n_init
    :manifold.spectral_embedding:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: spectral embedding
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: The adjacency matrix of the graph to embed.
                kind_of_value: 'array-like or sparse matrix, shape: (n_samples, n_samples)'
                name: adjacency_matrix
                optional: 'False'
                path: adjacency
              - default_value: '8'
                description: The dimension of the projection subspace.
                kind_of_value: integer
                name: num_components
                optional: 'True'
                path: n_components
              - default_value: None
                description: Solver for the eigenvalue decomposition.
                kind_of_value: '{''arpack'', ''lobpcg'', ''amg'', None}'
                name: eigen_solver
                optional: 'False'
                path: eigen_solver
              - default_value: '0.0'
                description: Stopping criterion for eigendecomposition of the Laplacian
                  matrix.
                kind_of_value: float
                name: eigen_tol
                optional: 'True'
                path: eigen_tol
              - default_value: 'True'
                description: If True, then compute normalized Laplacian.
                kind_of_value: boolean
                name: norm_laplacian
                optional: 'True'
                path: norm_laplacian
              - default_value: 'True'
                description: Whether to drop the first eigenvector. For spectral embedding,
                  this should be True as the first eigenvector should be constant vector
                  for connected graph, but for spectral clustering, this should be kept
                  as False to retain the first eigenvector.
                kind_of_value: boolean
                name: drop_first
                optional: 'True'
                path: drop_first
            optimisation_parameters: []
    :manifold.spectral_embedding_.SpectralEmbedding:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: object oriented spectral embedding
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '8'
                description: The dimension of the projection subspace.
                kind_of_value: integer
                name: num_components
                optional: 'True'
                path: n_components
              - default_value: '''nearest_neighbors'''
                description: How to construct the affinity matrix.
                kind_of_value: '{''nearest_neighbors'', ''rbf'', ''precomputed'', callable:
                use passed in function as affinity the function takes in data matrix
                (n_samples, n_features) and return affinity matrix (n_samples, n_samples)}'
                name: affinity_matrix
                optional: 'False'
                path: affinity
              - default_value: None
                description: Kernel coefficient for rbf kernel.
                kind_of_value: '{float, None}'
                name: gamma
                optional: 'True'
                path: gamma
              - default_value: None
                description: Solver for the eigenvalue decomposition.
                kind_of_value: '{''arpack'', ''lobpcg'', ''amg'', None}'
                name: eigen_solver
                optional: 'False'
                path: eigen_solver
              - default_value: None
                description: Number of nearest neighbors for nearest_neighbors graph
                  building.
                kind_of_value: '{integer, None}'
                name: num_neighbours
                optional: 'False'
                path: n_neighbors
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :manifold.t_sne.TSNE:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: t-distributed stochastic neighbor embedding
          other_names:
            - TSNE
            - t-SNE
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '2'
                description: The dimension of the projection subspace.
                kind_of_value: integer
                name: num_components
                optional: 'True'
                path: n_components
              - default_value: '30'
                description: The perplexity is related to the number of nearest neighbors
                  that is used in other manifold learning algorithms. Larger datasets
                  usually require a larger perplexity. Consider selecting a value between
                  5 and 50. The choice is not extremely critical since t-SNE is quite
                  insensitive to this parameter.
                kind_of_value: float
                name: perplexity
                optional: 'True'
                path: perplexity
              - default_value: '12.0'
                description: Controls how tight natural clusters in the original space
                  are in the embedded space and how much space will be between them.
                  For larger values, the space between natural clusters will be larger
                  in the embedded space. Again, the choice of this parameter is not
                  very critical. If the cost function increases during initial optimization,
                  the early exaggeration factor or the learning rate might be too high.
                kind_of_value: float
                name: early_exaggeration
                optional: 'True'
                path: early_exaggeration
              - default_value: '200.0'
                description: "The learning rate for t-SNE is usually in the range [10.0,\
                \ 1000.0]. If the learning rate is too high, the data may look like\
                \ a \u2018ball\u2019 with any point approximately equidistant from\
                \ its nearest neighbours. If the learning rate is too low, most points\
                \ may look compressed in a dense cloud with few outliers. If the cost\
                \ function gets stuck in a bad local minimum increasing the learning\
                \ rate may help."
                kind_of_value: float
                name: learning_rate
                optional: 'True'
                path: learning_rate
              - default_value: '0.0000001'
                description: If the gradient norm is below this threshold, the optimization
                  will be stopped.
                kind_of_value: float
                name: min_grad_norm
                optional: 'True'
                path: min_grad_norm
              - default_value: '''euclidean'''
                description: The metric to use when calculating distance between instances
                  in a feature array.
                kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
                ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
                ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'',
                ''matching'', ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'',
                ''sokalmichener'', ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable
                that should take two arrays as input and return one value indicating
                the distance between them}'
                name: distance_metric
                optional: 'False'
                path: metric
              - default_value: '''random'''
                description: Initialization of embedding.
                kind_of_value: '{''random'', ''pca'', numpy array of shape (n_samples,
                n_components)}'
                name: initialisation
                optional: 'True'
                path: init
              - default_value: '0'
                description: Controls the verbosity level.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '''barnes_hut'''
                description: Gradient calculation algorithm optimisation.
                kind_of_value: '{''barnes_hut'', ''exact''}'
                name: optimisation_method
                optional: 'False'
                path: method
              - default_value: '0.5'
                description: The angular size of a distant node as measured from a point.
                  If this size is below 'angle' then it is used as a summary node of
                  all points contained within it. This method is not very sensitive
                  to changes in this parameter in the range of 0.2 - 0.8. Angle less
                  than 0.2 has quickly increasing computation time and angle greater
                  0.8 has quickly increasing error.
                kind_of_value: float
                name: angle
                optional: 'False'
                path: angle
            optimisation_parameters:
              - default_value: '1000'
                description: Maximum number of iterations for the optimization.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: n_iter
              - default_value: '300'
                description: Maximum number of iterations without progress before we
                  abort the optimization, used after 250 initial iterations with early
                  exaggeration. Note that progress is only checked every 50 iterations
                  so this value is rounded to the next multiple of 50.
                kind_of_value: integer
                name: max_iterations_without_progress
                optional: 'True'
                path: n_iter_without_progress
    :mixture.bayesian_mixture.BayesianGaussianMixture:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: Bayesian Gaussian mixture
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1'
                description: The number of mixture components.
                kind_of_value: integer
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: '''full'''
                description: String describing the type of covariance parameters to
                  use.
                kind_of_value: '{''full'', ''tied'', ''diag'', ''spherical''}'
                name: covariance_type
                optional: 'False'
                path: covariance_type
              - default_value: '0.001'
                description: The convergence threshold.
                kind_of_value: float
                name: tolerance
                optional: 'False'
                path: tol
              - default_value: '0.000001'
                description: Non-negative regularization added to the diagonal of covariance.
                  Allows to assure that the covariance matrices are all positive.
                kind_of_value: float
                name: reg_covariance
                optional: 'False'
                path: reg_covar
              - default_value: '''kmeans'''
                description: The method used to initialize the weights, the means and
                  the precisions.
                kind_of_value: '{''kmeans'', ''random''}'
                name: init_params
                optional: 'False'
                path: init_params
              - default_value: '''dirichlet_process'''
                description: String describing the type of the weight concentration
                  prior.
                kind_of_value: '{''dirichlet_process'', ''dirichlet_distribution''}'
                name: weight_concentration_prior_type
                optional: 'False'
                path: weight_concentration_prior_type
              - default_value: None
                description: The dirichlet concentration of each component on the weight
                  distribution (Dirichlet). This is commonly called gamma in the literature.
                  The higher concentration puts more mass in the center and will lead
                  to more components being active, while a lower concentration parameter
                  will lead to more mass at the edge of the mixture weights simplex.
                kind_of_value: '{float > 0, None}'
                name: weight_concentration_prior
                optional: 'True'
                path: weight_concentration_prior
              - default_value: None
                description: The precision prior on the mean distribution (Gaussian).
                  Controls the extend to where means can be placed. Smaller values concentrate
                  the means of each clusters around mean_prior.
                kind_of_value: '{float > 0, None}'
                name: mean_precision_prior
                optional: 'True'
                path: mean_precision_prior
              - default_value: None
                description: The prior on the mean distribution (Gaussian).
                kind_of_value: '{array-like, shape (n_features, ), None}'
                name: mean_prior
                optional: 'True'
                path: mean_prior
              - default_value: None
                description: 'The prior of the number of degrees of freedom on the covariance
                distributions (Wishart). '
                kind_of_value: '{float, None}'
                name: degrees_of_freedom_prior
                optional: 'True'
                path: degrees_of_freedom_prior
              - default_value: None
                description: The user-provided initial precisions (inverse of the covariance
                  matrices).
                kind_of_value: '{array-like depending on ''covariance_type'': float
                if ''spherical'', (n_features, n_features) if ''tied'', (n_features,
                ) if ''diag'',(n_features, n_features) if ''full'', None}'
                name: covariance_prior
                optional: 'True'
                path: covariance_prior
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'False'
                path: warm_start
              - default_value: '0'
                description: Enable verbose output. If 1 then it prints the current
                  initialization and each iteration step. If greater than 1 then it
                  prints also the log probability and the time needed for each step.
                kind_of_value: integer
                name: verbose
                optional: 'False'
                path: verbose
              - default_value: '10'
                description: Number of iteration done before the next print.
                kind_of_value: integer
                name: verbose_interval
                optional: 'False'
                path: verbose_interval
            optimisation_parameters:
              - default_value: '100'
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
              - default_value: '1'
                description: The number of initializations to perform. The best results
                  are kept.
                kind_of_value: integer
                name: num_initializations
                optional: 'False'
                path: n_init
    :mixture.gaussian_mixture.GaussianMixture:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: Gaussian mixture
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1'
                description: The number of mixture components.
                kind_of_value: integer
                name: num_components
                optional: 'False'
                path: n_components
              - default_value: '''full'''
                description: String describing the type of covariance parameters to
                  use.
                kind_of_value: '{''full'', ''tied'', ''diag'', ''spherical''}'
                name: covariance_type
                optional: 'False'
                path: covariance_type
              - default_value: '0.001'
                description: The convergence threshold.
                kind_of_value: float
                name: tolerance
                optional: 'False'
                path: tol
              - default_value: '0.000001'
                description: Non-negative regularization added to the diagonal of covariance.
                  Allows to assure that the covariance matrices are all positive.
                kind_of_value: float
                name: reg_covariance
                optional: 'False'
                path: reg_covar
              - default_value: '''kmeans'''
                description: The method used to initialize the weights, the means and
                  the precisions.
                kind_of_value: '{''kmeans'', ''random''}'
                name: init_params
                optional: 'False'
                path: init_params
              - default_value: None
                description: The user-provided initial weights.
                kind_of_value: '{array-like, shape (n_components, ), None}'
                name: weights_init
                optional: 'True'
                path: weights_init
              - default_value: None
                description: The user-provided initial means.
                kind_of_value: '{array-like, shape (n_components,  n_features), None}'
                name: means_init
                optional: 'True'
                path: means_init
              - default_value: None
                description: The user-provided initial precisions (inverse of the covariance
                  matrices).
                kind_of_value: '{array-like depending on ''covariance_type'': (n_components,)
                if ''spherical'', (n_features, n_features) if ''tied'', (n_components,
                n_features) if ''diag'',(n_components, n_features, n_features) if
                ''full'', None}'
                name: precisions_init
                optional: 'True'
                path: precisions_init
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'False'
                path: warm_start
              - default_value: '0'
                description: Enable verbose output. If 1 then it prints the current
                  initialization and each iteration step. If greater than 1 then it
                  prints also the log probability and the time needed for each step.
                kind_of_value: integer
                name: verbose
                optional: 'False'
                path: verbose
              - default_value: '10'
                description: Number of iteration done before the next print.
                kind_of_value: integer
                name: verbose_interval
                optional: 'False'
                path: verbose_interval
            optimisation_parameters:
              - default_value: '100'
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
              - default_value: '1'
                description: The number of initializations to perform. The best results
                  are kept.
                kind_of_value: integer
                name: num_initializations
                optional: 'False'
                path: n_init
    :multiclass.OneVsOneClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: one vs one classifier
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: An estimator object implementing fit and either predict
                  or decision.
                kind_of_value: estimator object
                name: estimator
                optional: 'False'
                path: estimator
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :multiclass.OneVsRestClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: one vs rest classifier
          other_names:
            - one vs all classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: An estimator object implementing fit and either predict
                  or decision.
                kind_of_value: estimator object
                name: estimator
                optional: 'False'
                path: estimator
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :multiclass.OutputCodeClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: output code classifier
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: An estimator object implementing fit and either predict
                  or decision.
                kind_of_value: estimator object
                name: estimator
                optional: 'False'
                path: estimator
              - default_value: '1.5'
                description: Percentage of the number of classes to be used to create
                  the code book. A number between 0 and 1 will require fewer classifiers
                  than one-vs-the-rest. A number greater than 1 will require more classifiers
                  than one-vs-the-rest.
                kind_of_value: float
                name: code_size
                optional: 'False'
                path: code_size
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :multioutput.ClassifierChain:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: classifier chain
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: The base estimator from which the classifier chain is built.
                kind_of_value: estimator
                name: base_estimator
                optional: 'False'
                path: base_estimator
              - default_value: None
                description: Order in which the chain makes predictions about the columns
                  in the label matrix Y.
                kind_of_value: '{array-like, shape=[n_outputs], ''random'', None}'
                name: prediction_order
                optional: 'True'
                path: order
              - default_value: None
                description: Determines the cross-validation splitting strategy.
                kind_of_value: '{integer, object (cross-validation generator),  iterable
                yielding train and tests splits, None'
                name: cross_validation
                optional: 'True'
                path: cv
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters: []
    :multioutput.MultiOutputRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: multi target regression
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: An estimator object implementing fit and predict.
                kind_of_value: estimator object
                name: estimator
                optional: 'False'
                path: estimator
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :naive_bayes.BernoulliNB:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: bernoulli naive bayes classifier
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Additive (Laplace/Lidstone) smoothing parameter.
                kind_of_value: float
                name: smoothing parameter
                optional: 'True'
                path: alpha
              - default_value: '0.0'
                description: Threshold for binarizing (mapping to booleans) of sample
                  features.
                kind_of_value: float
                name: binarizeing_threshold
                optional: 'True'
                path: binarize
              - default_value: 'True'
                description: Whether to learn class prior probabilities or not.
                kind_of_value: boolean
                name: learn_prior_probabilities
                optional: 'True'
                path: fit_prior
              - default_value: None
                description: Prior probabilities of the classes. If specified the priors
                  are not adjusted according to the data.
                kind_of_value: array-like, shape (n_classes,)
                name: class_priors
                optional: 'False'
                path: class_prior
            optimisation_parameters: []
    :naive_bayes.GaussianNB:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: gaussian naive bayes
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: None
                description: Prior probabilities of the classes. If specified the priors
                  are not adjusted according to the data.
                kind_of_value: array-like, shape (n_classes,)
                name: class_priors
                optional: 'False'
                path: priors
            optimisation_parameters: []
    :naive_bayes.MultinomialNB:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: multinomial naive bayes classifier
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Additive (Laplace/Lidstone) smoothing parameter.
                kind_of_value: float
                name: smoothing parameter
                optional: 'True'
                path: alpha
              - default_value: 'True'
                description: Whether to learn class prior probabilities or not.
                kind_of_value: boolean
                name: learn_prior_probabilities
                optional: 'True'
                path: fit_prior
              - default_value: None
                description: Prior probabilities of the classes. If specified the priors
                  are not adjusted according to the data.
                kind_of_value: array-like, shape (n_classes,)
                name: class_priors
                optional: 'False'
                path: class_prior
            optimisation_parameters: []
    :neighbors.BallTree:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: ball tree
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: n_samples is the number of points in the data set, and
                  n_features is the dimension of the parameter space.
                kind_of_value: 'array, shape: [n_samples, n_features]'
                name: feature_matrix
                optional: 'False'
                path: X
              - default_value: '''minkowski'''
                description: The distance metric to use for the tree.
                kind_of_value: '{''seuclidean'', ''hamming'', ''dice'', ''jaccard'',
                ''matching'', ''russellrao'',  ''euclidean'', ''kulsinski'', ''wminkowski'',
                ''chebyshev'', ''mahalanobis'', ''sokalmichener'', ''rogerstanimoto'',
                ''infinity'', ''p'', ''canberra'',  ''haversine'', ''sokalsneath'',
                ''l1'', ''minkowski'', ''pyfunc'', ''l2'', ''cityblock'', ''braycurtis'',
                ''manhattan''}'
                name: distance_metric
                optional: 'False'
                path: metric
            optimisation_parameters:
              - default_value: '40'
                description: Number of points at which to switch to brute-force. Changing
                  leaf_size will not affect the results of a query, but can significantly
                  impact the speed of a query and the memory required to store the constructed
                  tree.
                kind_of_value: positive integer
                name: leaf_size
                optional: 'False'
                path: leaf_size
    :neighbors.KDTree:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: k-d tree
          other_names:
            - KDTree
            - k-dimensional tree
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: ''
                description: n_samples is the number of points in the data set, and
                  n_features is the dimension of the parameter space.
                kind_of_value: 'array, shape: [n_samples, n_features]'
                name: feature_matrix
                optional: 'False'
                path: X
              - default_value: '''minkowski'''
                description: The distance metric to use for the tree.
                kind_of_value: '{''p'', ''l1'', ''chebyshev'', ''manhattan'', ''minkowski'',
                ''cityblock'', ''l2'', ''euclidean'', ''infinity''}'
                name: distance_metric
                optional: 'False'
                path: metric
            optimisation_parameters:
              - default_value: '40'
                description: Number of points at which to switch to brute-force. Changing
                  leaf_size will not affect the results of a query, but can significantly
                  impact the speed of a query and the memory required to store the constructed
                  tree.
                kind_of_value: positive integer
                name: leaf_size
                optional: 'False'
                path: leaf_size
    :neighbors.classification.KNeighborsClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: k-nn classifier
          other_names:
            - k-nearest neighbors classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '5'
                description: Number of neighbors to use.
                kind_of_value: integer
                name: n_neighbors
                optional: 'True'
                path: n_neighbors
              - default_value: '''uniform'''
                description: Weight function used in prediction.
                kind_of_value: '{''uniform'', ''distance'', callable: a user-defined
                function which accepts an array of distances, and returns an array
                of the same shape containing the weights.}'
                name: weight_function
                optional: 'False'
                path: weights
              - default_value: '''auto'''
                description: Algorithm used to compute the nearest neighbors.
                kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
                name: nn_algorithm
                optional: 'True'
                path: algorithm
              - default_value: '30'
                description: Leaf size passed to BallTree or KDTree. This can affect
                  the speed of the construction and query, as well as the memory required
                  to store the tree. The optimal value depends on the nature of the
                  problem.
                kind_of_value: integer
                name: leaf_size
                optional: 'True'
                path: leaf_size
              - default_value: '2'
                description: Parameter for the Minkowski metric.
                kind_of_value: integer
                name: minkowski_parameter
                optional: 'True'
                path: p
              - default_value: '''minkowski'''
                description: The distance metric to use for the tree.
                kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
                ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
                ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'',
                ''matching'', ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'',
                ''sokalmichener'', ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable
                that should take two arrays as input and return one value indicating
                the distance between them}'
                name: distance_metric
                optional: 'False'
                path: metric
              - default_value: None
                description: Additional keyword arguments for the metric function.
                kind_of_value: dict
                name: metric_parameters
                optional: 'True'
                path: metric_params
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :neighbors.classification.RadiusNeighborsClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: radius neighbors classifier
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Range of parameter space to use.
                kind_of_value: float
                name: radius
                optional: 'True'
                path: radius
              - default_value: '''uniform'''
                description: Weight function used in prediction.
                kind_of_value: '{''uniform'', ''distance'', callable: a user-defined
                function which accepts an array of distances, and returns an array
                of the same shape containing the weights.}'
                name: weight_function
                optional: 'False'
                path: weights
              - default_value: '''auto'''
                description: Algorithm used to compute the nearest neighbors.
                kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
                name: nn_algorithm
                optional: 'True'
                path: algorithm
              - default_value: '30'
                description: Leaf size passed to BallTree or KDTree. This can affect
                  the speed of the construction and query, as well as the memory required
                  to store the tree. The optimal value depends on the nature of the
                  problem.
                kind_of_value: integer
                name: leaf_size
                optional: 'True'
                path: leaf_size
              - default_value: '2'
                description: Parameter for the Minkowski metric.
                kind_of_value: integer
                name: minkowski_parameter
                optional: 'True'
                path: p
              - default_value: '''minkowski'''
                description: The distance metric to use for the tree.
                kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
                ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
                ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'',
                ''matching'', ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'',
                ''sokalmichener'', ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable
                that should take two arrays as input and return one value indicating
                the distance between them}'
                name: distance_metric
                optional: 'False'
                path: metric
              - default_value: None
                description: Label, which is given for outlier samples (samples with
                  no neighbors on given radius). If set to None, ValueError is raised,
                  when outlier is detected.
                kind_of_value: '{integer, None}'
                name: outlier_label
                optional: 'True'
                path: outlier_label
              - default_value: None
                description: Additional keyword arguments for the metric function.
                kind_of_value: dict
                name: metric_parameters
                optional: 'True'
                path: metric_params
            optimisation_parameters: []
    :neighbors.kde.KernelDensity:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: kernel density
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: The bandwidth of the kernel.
                kind_of_value: float
                name: bandwidth
                optional: 'True'
                path: bandwidth
              - default_value: '''auto'''
                description: The tree algorithm to use.
                kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree''}'
                name: algorithm
                optional: 'True'
                path: algorithm
              - default_value: '''gaussian'''
                description: The kernel to use.
                kind_of_value: '{''gaussian'', ''tophat'', ''epanechnikov'', ''exponential'',
                ''linear'', ''cosine''}'
                name: kernel
                optional: 'False'
                path: kernel
              - default_value: '''euclidean'''
                description: The distance metric to use.
                kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
                ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
                ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'',
                ''matching'', ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'',
                ''sokalmichener'', ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable
                that should take two arrays as input and return one value indicating
                the distance between them}'
                name: distance_metric
                optional: 'False'
                path: metric
              - default_value: '0'
                description: The desired absolute tolerance of the result. A larger
                  tolerance will generally lead to faster execution. Default is 0.
                kind_of_value: float
                name: absolute_tolerance
                optional: 'False'
                path: atol
              - default_value: '0'
                description: The desired relative tolerance of the result. A larger
                  tolerance will generally lead to faster execution.
                kind_of_value: float
                name: relative_tolerance
                optional: 'False'
                path: rtol
              - default_value: 'True'
                description: If true (default), use a breadth-first approach to the
                  problem. Otherwise use a depth-first approach.
                kind_of_value: boolean
                name: breadth_first
                optional: Fasle
                path: breadth_first
              - default_value: '40'
                description: Leaf size passed to BallTree or KDTree. This can affect
                  the speed of the construction and query, as well as the memory required
                  to store the tree. The optimal value depends on the nature of the
                  problem.
                kind_of_value: integer
                name: leaf_size
                optional: 'True'
                path: leaf_size
              - default_value: None
                description: Additional keyword arguments for the metric function.
                kind_of_value: '{dict, None}'
                name: metric_parameters
                optional: 'True'
                path: metric_params
            optimisation_parameters: []
    :neighbors.lof.LocalOutlierFactor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: local outlier factor
          other_names:
            - LOF
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '20'
                description: Number of neighbors to use by default for kneighbors queries.
                kind_of_value: integer
                name: num_neighbours
                optional: 'True'
                path: n_neighbors
              - default_value: '''auto'''
                description: The algorithm to be used by the NearestNeighbors module
                  to compute pointwise distances and find nearest neighbors.
                kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
                name: algorithm
                optional: 'True'
                path: algorithm
              - default_value: '30'
                description: Leaf size passed to BallTree or KDTree. This can affect
                  the speed of the construction and query, as well as the memory required
                  to store the tree. The optimal value depends on the nature of the
                  problem.
                kind_of_value: integer
                name: leaf_size
                optional: 'True'
                path: leaf_size
              - default_value: '''minkowski'''
                description: The metric to use when calculating distance between instances
                  in a feature array.
                kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
                ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
                ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'',
                ''matching'', ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'',
                ''sokalmichener'', ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable
                that should take two arrays as input and return one value indicating
                the distance between them}'
                name: distance_metric
                optional: 'False'
                path: metric
              - default_value: '2'
                description: Parameter for the Minkowski metric. When minkowski_parameter
                  = 1, this is equivalent to using manhattan_distance (l1), and euclidean_distance
                  (l2) for minkowski_parameter = 2. For arbitrary minkowski_parameter,
                  minkowski_distance (l_p) is used.
                kind_of_value: '{integer, None}'
                name: minkowski_parameter
                optional: 'True'
                path: p
              - default_value: None
                description: Additional keyword arguments for the metric function.
                kind_of_value: '{dict, None}'
                name: metric_parameters
                optional: 'True'
                path: metric_params
              - default_value: '0.1'
                description: The amount of contamination of the data set, i.e. the proportion
                  of outliers in the data set.
                kind_of_value: float in (0., 0.5)
                name: contamination
                optional: 'True'
                path: contamination
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :neighbors.nearest_centroid.NearestCentroid:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: nearest centroid classifier
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '''euclidean'''''
                description: The metric to use when calculating distance between instances
                  in a feature array.
                kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
                ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
                ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'',
                ''matching'', ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'',
                ''sokalmichener'', ''sokalsneath'', ''sqeuclidean'', ''yule''}'
                name: distance_metric
                optional: 'False'
                path: metric
              - default_value: None
                description: Threshold for shrinking centroids to remove features.
                kind_of_value: '{float, None}'
                name: shrink_threshold
                optional: 'True'
                path: shrink_threshold
            optimisation_parameters: []
    :neighbors.regression.KNeighborsRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: k-nn regressor
          other_names:
            - k-nearest neighbors regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '5'
                description: Number of neighbors to use.
                kind_of_value: integer
                name: n_neighbors
                optional: 'True'
                path: n_neighbors
              - default_value: '''uniform'''
                description: Weight function used in prediction.
                kind_of_value: '{''uniform'', ''distance'', callable: a user-defined
                function which accepts an array of distances, and returns an array
                of the same shape containing the weights.}'
                name: weight_function
                optional: 'False'
                path: weights
              - default_value: '''auto'''
                description: Algorithm used to compute the nearest neighbors.
                kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
                name: nn_algorithm
                optional: 'True'
                path: algorithm
              - default_value: '30'
                description: Leaf size passed to BallTree or KDTree. This can affect
                  the speed of the construction and query, as well as the memory required
                  to store the tree. The optimal value depends on the nature of the
                  problem.
                kind_of_value: integer
                name: leaf_size
                optional: 'True'
                path: leaf_size
              - default_value: '2'
                description: Parameter for the Minkowski metric.
                kind_of_value: integer
                name: minkowski_parameter
                optional: 'True'
                path: p
              - default_value: '''minkowski'''
                description: The distance metric to use for the tree.
                kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
                ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
                ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'',
                ''matching'', ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'',
                ''sokalmichener'', ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable
                that should take two arrays as input and return one value indicating
                the distance between them}'
                name: distance_metric
                optional: 'False'
                path: metric
              - default_value: None
                description: Additional keyword arguments for the metric function.
                kind_of_value: dict
                name: metric_parameters
                optional: 'True'
                path: metric_params
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :neighbors.regression.RadiusNeighborsRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: radius neighbors regressor
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Range of parameter space to use.
                kind_of_value: float
                name: radius
                optional: 'True'
                path: radius
              - default_value: '''uniform'''
                description: Weight function used in prediction.
                kind_of_value: '{''uniform'', ''distance'', callable: a user-defined
                function which accepts an array of distances, and returns an array
                of the same shape containing the weights.}'
                name: weight_function
                optional: 'False'
                path: weights
              - default_value: '''auto'''
                description: Algorithm used to compute the nearest neighbors.
                kind_of_value: '{''auto'', ''ball_tree'', ''kd_tree'', ''brute''}'
                name: nn_algorithm
                optional: 'True'
                path: algorithm
              - default_value: '30'
                description: Leaf size passed to BallTree or KDTree. This can affect
                  the speed of the construction and query, as well as the memory required
                  to store the tree. The optimal value depends on the nature of the
                  problem.
                kind_of_value: integer
                name: leaf_size
                optional: 'True'
                path: leaf_size
              - default_value: '2'
                description: Parameter for the Minkowski metric.
                kind_of_value: integer
                name: minkowski_parameter
                optional: 'True'
                path: p
              - default_value: '''minkowski'''
                description: The distance metric to use for the tree.
                kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
                ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
                ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'',
                ''matching'', ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'',
                ''sokalmichener'', ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable
                that should take two arrays as input and return one value indicating
                the distance between them}'
                name: distance_metric
                optional: 'False'
                path: metric
              - default_value: None
                description: Additional keyword arguments for the metric function.
                kind_of_value: dict
                name: metric_parameters
                optional: 'True'
                path: metric_params
            optimisation_parameters: []
    :neighbors.unsupervised.NearestNeighbors:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: nearest neighbours
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '5'
                description: Number of neighbors to use by default for kneighbors queries.
                kind_of_value: integer
                name: num_neighbours
                optional: 'True'
                path: n_neighbors
              - default_value: '1.0'
                description: Range of parameter space to use by default for radius_neighbors
                  queries.
                kind_of_value: float
                name: radius
                optional: 'True'
                path: radius
              - default_value: '''auto'''
                description: Algorithm used to compute the nearest neighbors.
                kind_of_value: '{''ball_tree'', ''kd_tree'', ''brute'', ''auto''}'
                name: algorithm
                optional: 'True'
                path: algorithm
              - default_value: '30'
                description: Leaf size passed to BallTree or KDTree. This can affect
                  the speed of the construction and query, as well as the memory required
                  to store the tree. The optimal value depends on the nature of the
                  problem.
                kind_of_value: integer
                name: leaf_size
                optional: 'True'
                path: leaf_size
              - default_value: '''minkowski'''
                description: Metric to use for distance computation.
                kind_of_value: '{''cityblock'', ''cosine'', ''euclidean'', ''l1'', ''l2'',
                ''manhattan'', ''braycurtis'', ''canberra'', ''chebyshev'', ''correlation'',
                ''dice'', ''hamming'', ''jaccard'', ''kulsinski'', ''mahalanobis'',
                ''matching'', ''minkowski'', ''rogerstanimoto'', ''russellrao'', ''seuclidean'',
                ''sokalmichener'', ''sokalsneath'', ''sqeuclidean'', ''yule'', a callable
                that should take two arrays as input and return one value indicating
                the distance between them}'
                name: distance_metric
                optional: 'False'
                path: metric
              - default_value: '2'
                description: Parameter for the Minkowski metric.
                kind_of_value: integer
                name: minkowski_parameter
                optional: 'True'
                path: p
              - default_value: None
                description: Additional keyword arguments for the metric function.
                kind_of_value: dict
                name: metric_parameters
                optional: 'True'
                path: metric_params
            optimisation_parameters:
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :neural_network.multilayer_perceptron.MLPClassifier:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: multi-layer perceptron classifier
          other_names:
            - MLP classifier
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: (100,)
                description: The ith element represents the number of neurons in the
                  ith hidden layer.
                kind_of_value: tuple, length = n_layers - 2
                name: hidden_layer_sizes
                optional: 'False'
                path: hidden_layer_sizes
              - default_value: '''relu'''
                description: Activation function for the hidden layer.
                kind_of_value: ' {''identity'', ''logistic'', ''tanh'', ''relu''}'
                name: activation
                optional: 'False'
                path: activation
              - default_value: '''adam'''
                description: The solver for weight optimization.
                kind_of_value: '{''lbfgs'', ''sgd'', ''adam''}'
                name: solver
                optional: 'False'
                path: solver
              - default_value: '0.0001'
                description: L2 penalty (regularization term) parameter.
                kind_of_value: float
                name: l2_penalty
                optional: 'True'
                path: alpha
              - default_value: '''auto'''
                description: Size of minibatches for stochastic optimizers.
                kind_of_value: '{integer, ''auto''}'
                name: batch_size
                optional: 'True'
                path: batch_size
              - default_value: '''constant'''
                description: Learning rate schedule for weight updates.
                kind_of_value: '{''constant'', ''invscaling'', ''adaptive''}'
                name: learning_rate
                optional: 'False'
                path: learning_rate
              - default_value: '0.001'
                description: The initial learning rate used. It controls the step-size
                  in updating the weights.
                kind_of_value: double
                name: learning_rate_init
                optional: 'True'
                path: learning_rate_init
              - default_value: '0.5'
                description: The exponent for inverse scaling learning rate.
                kind_of_value: double
                name: inverse_scaling_exponent
                optional: 'True'
                path: power_t
              - default_value: 'True'
                description: Whether to shuffle samples in each iteration.
                kind_of_value: boolean
                name: shuffle
                optional: 'True'
                path: shuffle
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '0.0001'
                description: Precision of the solution. (The tolerance for the optimisation.)
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'False'
                description: Whether to print progress messages to stdout.
                kind_of_value: boolean
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: '0.9'
                description: Momentum for gradient descent update.
                kind_of_value: float
                name: gradient_momentum
                optional: 'False'
                path: momentum
              - default_value: 'True'
                description: "Whether to use Nesterov\u2019s momentum."
                kind_of_value: boolean
                name: nesterovs_momentum
                optional: 'False'
                path: nesterovs_momentum
              - default_value: Flase
                description: Whether to use early stopping to terminate training when
                  validation score is not improving. If set to true, it will automatically
                  set aside 10% of training data as validation and terminate training
                  when validation score is not improving by at least tol for two consecutive
                  epochs.
                kind_of_value: boolean
                name: early_stopping
                optional: 'False'
                path: early_stopping
              - default_value: '0.1'
                description: The proportion of training data to set aside as validation
                  set for early stopping.
                kind_of_value: float between 0 and 1
                name: validation_fraction
                optional: 'True'
                path: validation_fraction
              - default_value: '0.9'
                description: Exponential decay rate for estimates of first moment vector
                  in adam.
                kind_of_value: float should be in [0, 1)
                name: adam_beta_1
                optional: 'True'
                path: beta_1
              - default_value: '0.999'
                description: Exponential decay rate for estimates of second moment vector
                  in adam.
                kind_of_value: float should be in [0, 1)
                name: adam_beta_2
                optional: 'True'
                path: beta_2
              - default_value: '0.00000001'
                description: Value for numerical stability in adam.
                kind_of_value: float
                name: adam_epsilon
                optional: 'True'
                path: epsilon
            optimisation_parameters:
              - default_value: '200'
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :neural_network.multilayer_perceptron.MLPRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: multi-layer perceptron regressor
          other_names:
            - MLP regressor
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: (100,)
                description: The ith element represents the number of neurons in the
                  ith hidden layer.
                kind_of_value: tuple, length = n_layers - 2
                name: hidden_layer_sizes
                optional: 'False'
                path: hidden_layer_sizes
              - default_value: '''relu'''
                description: Activation function for the hidden layer.
                kind_of_value: ' {''identity'', ''logistic'', ''tanh'', ''relu''}'
                name: activation
                optional: 'False'
                path: activation
              - default_value: '''adam'''
                description: The solver for weight optimization.
                kind_of_value: '{''lbfgs'', ''sgd'', ''adam''}'
                name: solver
                optional: 'False'
                path: solver
              - default_value: '0.0001'
                description: L2 penalty (regularization term) parameter.
                kind_of_value: float
                name: l2_penalty
                optional: 'True'
                path: alpha
              - default_value: '''auto'''
                description: Size of minibatches for stochastic optimizers.
                kind_of_value: '{integer, ''auto''}'
                name: batch_size
                optional: 'True'
                path: batch_size
              - default_value: '''constant'''
                description: Learning rate schedule for weight updates.
                kind_of_value: '{''constant'', ''invscaling'', ''adaptive''}'
                name: learning_rate
                optional: 'False'
                path: learning_rate
              - default_value: '0.001'
                description: The initial learning rate used. It controls the step-size
                  in updating the weights.
                kind_of_value: double
                name: learning_rate_init
                optional: 'True'
                path: learning_rate_init
              - default_value: '0.5'
                description: The exponent for inverse scaling learning rate.
                kind_of_value: double
                name: inverse_scaling_exponent
                optional: 'True'
                path: power_t
              - default_value: 'True'
                description: Whether to shuffle samples in each iteration.
                kind_of_value: boolean
                name: shuffle
                optional: 'True'
                path: shuffle
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: '0.0001'
                description: Precision of the solution. (The tolerance for the optimisation.)
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'False'
                description: Whether to print progress messages to stdout.
                kind_of_value: boolean
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'False'
                description: When set to True, reuse the solution of the previous call
                  to fit as initialization, otherwise, just erase the previous solution.
                kind_of_value: boolean
                name: reuse_previous
                optional: 'True'
                path: warm_start
              - default_value: '0.9'
                description: Momentum for gradient descent update.
                kind_of_value: float
                name: gradient_momentum
                optional: 'False'
                path: momentum
              - default_value: 'True'
                description: "Whether to use Nesterov\u2019s momentum."
                kind_of_value: boolean
                name: nesterovs_momentum
                optional: 'False'
                path: nesterovs_momentum
              - default_value: Flase
                description: Whether to use early stopping to terminate training when
                  validation score is not improving. If set to true, it will automatically
                  set aside 10% of training data as validation and terminate training
                  when validation score is not improving by at least tol for two consecutive
                  epochs.
                kind_of_value: boolean
                name: early_stopping
                optional: Flase
                path: early_stopping
              - default_value: '0.1'
                description: The proportion of training data to set aside as validation
                  set for early stopping.
                kind_of_value: float between 0 and 1
                name: validation_fraction
                optional: 'True'
                path: validation_fraction
              - default_value: '0.9'
                description: Exponential decay rate for estimates of first moment vector
                  in adam.
                kind_of_value: float should be in [0, 1)
                name: adam_beta_1
                optional: 'True'
                path: beta_1
              - default_value: '0.999'
                description: Exponential decay rate for estimates of second moment vector
                  in adam.
                kind_of_value: float should be in [0, 1)
                name: adam_beta_2
                optional: 'True'
                path: beta_2
              - default_value: '0.00000001'
                description: Value for numerical stability in adam.
                kind_of_value: float
                name: adam_epsilon
                optional: 'True'
                path: epsilon
            optimisation_parameters:
              - default_value: '200'
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :neural_network.rbm.BernoulliRBM:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: Bernoulli restricted Boltzmann machines
          other_names:
            - Bernoulli RBM
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '256'
                description: Number of binary hidden units.
                kind_of_value: integer
                name: num_components
                optional: 'True'
                path: n_components
              - default_value: '0.1'
                description: The learning rate for weight updates.
                kind_of_value: float
                name: learning_rate
                optional: 'True'
                path: learning_rate
              - default_value: '10'
                description: Number of examples per minibatch.
                kind_of_value: integer
                name: batch_size
                optional: 'True'
                path: batch_size
              - default_value: '0'
                description: he verbosity level. The default, zero, means silent mode.
                kind_of_value: integer
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: None
                description: A random number generator instance to define the state
                  of the random permutations generator. If an integer is given, it fixes
                  the seed. Defaults to the global numpy random number generator.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '10'
                description: Number of iterations/sweeps over the training dataset to
                  perform during training.
                kind_of_value: integer
                name: num_iter
                optional: 'True'
                path: n_iter
    :semi_supervised.label_propagation.LabelPropagation:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: label propagation
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '''rbf'''
                description: Specifies the kernel type to be used in the algorithm.
                kind_of_value: '{''knn'', ''rbf'', a callable taking two inputs in shape
                (n_samples, n_features) and returns weight matrix in shape [n_samples,
                n_samples]}'
                name: kernel
                optional: 'False'
                path: kernel
              - default_value: '20'
                description: Parameter for rbf kernel
                kind_of_value: float
                name: rbf_parameter
                optional: 'False'
                path: gamma
              - default_value: '7'
                description: Number of neighbors to use by for knn kernel.
                kind_of_value: integer > 0
                name: num_neighbours
                optional: 'True'
                path: n_neighbors
              - default_value: '0.001'
                description: 'Convergence tolerance: threshold to consider the system
                at steady state'
                kind_of_value: float
                name: tolerance
                optional: 'False'
                path: tol
            optimisation_parameters:
              - default_value: '1000'
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :semi_supervised.label_propagation.LabelSpreading:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: label spreading
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '''rbf'''
                description: Specifies the kernel type to be used in the algorithm.
                kind_of_value: '{''knn'', ''rbf'', a callable taking two inputs in shape
                (n_samples, n_features) and returns weight matrix in shape [n_samples,
                n_samples]}'
                name: kernel
                optional: 'False'
                path: kernel
              - default_value: '20'
                description: Parameter for rbf kernel
                kind_of_value: float
                name: rbf_parameter
                optional: 'False'
                path: gamma
              - default_value: '7'
                description: Number of neighbors to use by for knn kernel.
                kind_of_value: integer > 0
                name: num_neighbours
                optional: 'True'
                path: n_neighbors
              - default_value: '0.2'
                description: Clamping factor. A value in [0, 1] that specifies the relative
                  amount that an instance should adopt the information from its neighbors
                  as opposed to its initial label. 0 means  keeping the initial label
                  information; 1 means replacing all initial information.
                kind_of_value: float in [0,1]
                name: calmping_factor
                optional: 'False'
                path: alpha
              - default_value: '0.001'
                description: 'Convergence tolerance: threshold to consider the system
                at steady state'
                kind_of_value: float
                name: tolerance
                optional: 'False'
                path: tol
            optimisation_parameters:
              - default_value: '30'
                description: Maximum number of iterations.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
              - default_value: '1'
                description: The number of jobs to use for the computation. If -1 all
                  CPUs are used.
                kind_of_value: integer
                name: jobs
                optional: 'True'
                path: n_jobs
    :svm.classes.LinearSVC:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: linear-support vector classification
          other_names:
            - linear SVC
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '''l2'''
                description: Specifies the norm used in the penalization.
                kind_of_value: '{''l1'', ''l2''}'
                name: penalty_norm
                optional: 'False'
                path: penalty
              - default_value: '''squared_hinge'''
                description: The loss function to be used.
                kind_of_value: '{''hinge'', ''squared_hinge''}'
                name: loss_function
                optional: 'False'
                path: loss
              - default_value: 'True'
                description: Select the algorithm to either solve the dual or primal
                  optimization problem.
                kind_of_value: boolean
                name: dual
                optional: 'False'
                path: dual
              - default_value: '0.0001'
                description: Tolerance for stopping criteria.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: '1.0'
                description: Penalty parameter of the error term.
                kind_of_value: float
                name: error_penalty
                optional: 'True'
                path: C
              - default_value: '''ovr'''
                description: Determines the multi-class strategy if y contains more
                  than two classes.
                kind_of_value: '{''ovr'', ''crammer_singer''}'
                name: multi_class_strategy
                optional: 'False'
                path: multi_class
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'True'
                path: fit_intercept
              - default_value: '1'
                description: "Useful only when the solver \u2018liblinear\u2019 is used\
                \ and self.fit_intercept is set to True. In this case, x becomes [x,\
                \ self.intercept_scaling], i.e. a \u201Csynthetic\u201D feature with\
                \ constant value equal to intercept_scaling is appended to the instance\
                \ vector. The intercept becomes intercept_scaling * synthetic_feature_weight."
                kind_of_value: float
                name: intercept_scaling
                optional: 'False'
                path: intercept_scaling
              - default_value: None
                description: "Weights the classes. The \u201Cbalanced\u201D mode uses\
                \ the values of y to automatically adjust weights inversely proportional\
                \ to class frequencies in the input data as n_samples / (n_classes\
                \ * np.bincount(y))."
                kind_of_value: '{dictionary with weights for all calsses, ''balanced'',
                None}'
                name: class_weight
                optional: 'True'
                path: class_weight
              - default_value: '0'
                description: Enable verbose output.
                kind_of_value: integer
                name: verbose
                optional: 'False'
                path: verbose
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '1000'
                description: The maximum number of iterations to be run.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
    :svm.classes.LinearSVR:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: linear-support vector regression
          other_names:
            - linearSVR
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Penalty parameter of the error term.
                kind_of_value: float
                name: error_penalty
                optional: 'True'
                path: C
              - default_value: '''epsilon_insensitive'''
                description: The loss function to be used.
                kind_of_value: '{''epsilon_insensitive'', ''squared_epsilon_insensitive''}'
                name: loss_function
                optional: 'False'
                path: loss
              - default_value: '0.0'
                description: Epsilon parameter in the epsilon-insensitive loss function.
                  Note that the value of this parameter depends on the scale of the
                  target variable y.
                kind_of_value: float
                name: epsilon
                optional: 'True'
                path: epsilon
              - default_value: 'True'
                description: Select the algorithm to either solve the dual or primal
                  optimization problem.
                kind_of_value: boolean
                name: dual
                optional: 'False'
                path: dual
              - default_value: '0.0001'
                description: Tolerance for stopping criterion.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'True'
                description: Whether to calculate the intercept for this model.
                kind_of_value: boolean
                name: fit_intercept
                optional: 'True'
                path: fit_intercept
              - default_value: '1'
                description: "When self.fit_intercept is True, instance vector x becomes\
                \ [x, self.intercept_scaling], i.e. a \u201Csynthetic\u201D feature\
                \ with constant value equals to intercept_scaling is appended to the\
                \ instance vector. The intercept becomes intercept_scaling * synthetic\
                \ feature weight Note! the synthetic feature weight is subject to\
                \ l1/l2 regularization as all other features. To lessen the effect\
                \ of regularization on synthetic feature weight (and therefore on\
                \ the intercept) intercept_scaling has to be increased."
                kind_of_value: float
                name: intercept_scaling
                optional: 'True'
                path: intercept_scaling
              - default_value: '0'
                description: Enable verbose output.
                kind_of_value: integer
                name: verbose
                optional: 'False'
                path: verbose
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '1000'
                description: The maximum number of iterations to be run.
                kind_of_value: integer
                name: max_iterations
                optional: 'False'
                path: max_iter
    :svm.classes.NuSVC:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: nu-support vector classification
          other_names:
            - nuSVC
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '0.5'
                description: An upper bound on the fraction of training errors and a
                  lower bound of the fraction of support vectors. Should be in the interval
                  (0, 1].
                kind_of_value: float (0, 1]
                name: nu
                optional: 'True'
                path: nu
              - default_value: '''rbf'''
                description: Specifies the kernel type to be used in the algorithm.
                kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
                a callable in shape (n_samples, n_samples)}'
                name: kernel
                optional: 'True'
                path: kernel
              - default_value: '3'
                description: 'Degree of the polynomial kernel function (''poly''). '
                kind_of_value: integer
                name: poly_degree
                optional: 'True'
                path: degree
              - default_value: '''auto'''
                description: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'. If
                  kernel_coefficient is 'auto' then 1/n_features will be used instead.
                kind_of_value: '{float, ''auto''}'
                name: kernel_coefficient
                optional: 'True'
                path: gamma
              - default_value: '0.0'
                description: Independent term in kernel function. It is only significant
                  in 'poly' and 'sigmoid'.
                kind_of_value: float
                name: independent_kernel_term
                optional: 'True'
                path: coef0
              - default_value: 'True'
                description: Whether to use the shrinking heuristic.
                kind_of_value: boolean
                name: shrinking
                optional: 'True'
                path: shrinking
              - default_value: 'False'
                description: Whether to enable probability estimates. This must be enabled
                  prior to calling fit, and will slow down that method.
                kind_of_value: boolean
                name: probability
                optional: 'True'
                path: probability
              - default_value: '0.001'
                description: Tolerance for stopping criterion.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: None
                description: "Weights the classes. The \u201Cbalanced\u201D mode uses\
                \ the values of y to automatically adjust weights inversely proportional\
                \ to class frequencies in the input data as n_samples / (n_classes\
                \ * np.bincount(y))."
                kind_of_value: '{dictionary with weights for all calsses, ''balanced'',
                None}'
                name: class_weight
                optional: 'True'
                path: class_weight
              - default_value: 'False'
                description: Enable verbose output.
                kind_of_value: boolean
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'False'
                description: Whether to return a one-vs-rest ('ovr') decision function
                  of shape (n_samples, n_classes) as all other classifiers, or the original
                  one-vs-one ('ovo') decision function of libsvm which has shape (n_samples,
                  n_classes * (n_classes - 1) / 2).
                kind_of_value: '{''ovo'', ''ovr''}'
                name: decision_function_shape
                optional: 'False'
                path: decision_function_shape
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '200'
                description: Specify the size of the kernel cache (in MB).
                kind_of_value: float
                name: cache_size
                optional: 'True'
                path: cache_size
              - default_value: '-1'
                description: Hard limit on iterations within solver, or -1 for no limit.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :svm.classes.NuSVR:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: nu-support vector regression
          other_names:
            - nuSVR
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Penalty parameter of the error term.
                kind_of_value: float
                name: error_penalty
                optional: 'True'
                path: C
              - default_value: '0.5'
                description: An upper bound on the fraction of training errors and a
                  lower bound of the fraction of support vectors. Should be in the interval
                  (0, 1].
                kind_of_value: float (0, 1]
                name: nu
                optional: 'True'
                path: nu
              - default_value: '''rbf'''
                description: Specifies the kernel type to be used in the algorithm.
                kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
                a callable in shape (n_samples, n_samples)}'
                name: kernel
                optional: 'True'
                path: kernel
              - default_value: '3'
                description: 'Degree of the polynomial kernel function (''poly''). '
                kind_of_value: integer
                name: poly_degree
                optional: 'True'
                path: degree
              - default_value: '''auto'''
                description: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'. If
                  kernel_coefficient is 'auto' then 1/n_features will be used instead.
                kind_of_value: '{float, ''auto''}'
                name: kernel_coefficient
                optional: 'True'
                path: gamma
              - default_value: '0.0'
                description: Independent term in kernel function. It is only significant
                  in 'poly' and 'sigmoid'.
                kind_of_value: float
                name: independent_kernel_term
                optional: 'True'
                path: coef0
              - default_value: 'True'
                description: Whether to use the shrinking heuristic.
                kind_of_value: boolean
                name: shrinking
                optional: 'True'
                path: shrinking
              - default_value: '0.001'
                description: Tolerance for stopping criterion.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'False'
                description: Enable verbose output.
                kind_of_value: boolean
                name: verbose
                optional: 'False'
                path: verbose
            optimisation_parameters:
              - default_value: '200'
                description: Specify the size of the kernel cache (in MB).
                kind_of_value: float
                name: cache_size
                optional: 'True'
                path: cache_size
              - default_value: '-1'
                description: Hard limit on iterations within solver, or -1 for no limit.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :svm.classes.OneClassSVM:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: one-class support vector machine
          other_names:
            - one-calss SVM
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '0.5'
                description: An upper bound on the fraction of training errors and a
                  lower bound of the fraction of support vectors. Should be in the interval
                  (0, 1].
                kind_of_value: float (0, 1]
                name: nu
                optional: 'True'
                path: nu
              - default_value: '''rbf'''
                description: Specifies the kernel type to be used in the algorithm.
                kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
                a callable in shape (n_samples, n_samples)}'
                name: kernel
                optional: 'True'
                path: kernel
              - default_value: '3'
                description: 'Degree of the polynomial kernel function (''poly''). '
                kind_of_value: integer
                name: poly_degree
                optional: 'True'
                path: degree
              - default_value: '''auto'''
                description: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'. If
                  kernel_coefficient is 'auto' then 1/n_features will be used instead.
                kind_of_value: '{float, ''auto''}'
                name: kernel_coefficient
                optional: 'True'
                path: gamma
              - default_value: '0.0'
                description: Independent term in kernel function. It is only significant
                  in 'poly' and 'sigmoid'.
                kind_of_value: float
                name: independent_kernel_term
                optional: 'True'
                path: coef0
              - default_value: 'True'
                description: Whether to use the shrinking heuristic.
                kind_of_value: boolean
                name: shrinking
                optional: 'True'
                path: shrinking
              - default_value: '0.001'
                description: Tolerance for stopping criterion.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'False'
                description: Enable verbose output.
                kind_of_value: boolean
                name: verbose
                optional: 'False'
                path: verbose
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '200'
                description: Specify the size of the kernel cache (in MB).
                kind_of_value: float
                name: cache_size
                optional: 'True'
                path: cache_size
              - default_value: '-1'
                description: Hard limit on iterations within solver, or -1 for no limit.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :svm.classes.SVC:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: c-oja pas vector classification
          other_names:
            - SVC
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Penalty parameter of the error term.
                kind_of_value: float
                name: error_penalty
                optional: 'True'
                path: C
              - default_value: '''rbf'''
                description: Specifies the kernel type to be used in the algorithm.
                kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
                a callable in shape (n_samples, n_samples)}'
                name: kernel
                optional: 'True'
                path: kernel
              - default_value: '3'
                description: 'Degree of the polynomial kernel function (''poly''). '
                kind_of_value: integer
                name: poly_degree
                optional: 'True'
                path: degree
              - default_value: '''auto'''
                description: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'. If
                  kernel_coefficient is 'auto' then 1/n_features will be used instead.
                kind_of_value: '{float, ''auto''}'
                name: kernel_coefficient
                optional: 'True'
                path: gamma
              - default_value: '0.0'
                description: Independent term in kernel function. It is only significant
                  in 'poly' and 'sigmoid'.
                kind_of_value: float
                name: independent_kernel_term
                optional: 'True'
                path: coef0
              - default_value: 'False'
                description: Whether to enable probability estimates. This must be enabled
                  prior to calling fit, and will slow down that method.
                kind_of_value: boolean
                name: probability
                optional: 'True'
                path: probability
              - default_value: 'True'
                description: Whether to use the shrinking heuristic.
                kind_of_value: boolean
                name: shrinking
                optional: 'True'
                path: shrinking
              - default_value: '0.001'
                description: Tolerance for stopping criterion.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: None
                description: "Weights the classes. The \u201Cbalanced\u201D mode uses\
                \ the values of y to automatically adjust weights inversely proportional\
                \ to class frequencies in the input data as n_samples / (n_classes\
                \ * np.bincount(y))."
                kind_of_value: '{dictionary with weights for all calsses, ''balanced'',
                None}'
                name: class_weight
                optional: 'True'
                path: class_weight
              - default_value: 'False'
                description: Enable verbose output.
                kind_of_value: boolean
                name: verbose
                optional: 'True'
                path: verbose
              - default_value: 'False'
                description: Whether to return a one-vs-rest ('ovr') decision function
                  of shape (n_samples, n_classes) as all other classifiers, or the original
                  one-vs-one ('ovo') decision function of libsvm which has shape (n_samples,
                  n_classes * (n_classes - 1) / 2).
                kind_of_value: '{''ovo'', ''ovr''}'
                name: decision_function_shape
                optional: 'False'
                path: decision_function_shape
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
            optimisation_parameters:
              - default_value: '200'
                description: Specify the size of the kernel cache (in MB).
                kind_of_value: float
                name: cache_size
                optional: 'True'
                path: cache_size
              - default_value: '-1'
                description: Hard limit on iterations within solver, or -1 for no limit.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    :svm.classes.SVR:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: epsilon-support vector regression
          other_names:
            - SVR
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '1.0'
                description: Penalty parameter of the error term.
                kind_of_value: float
                name: error_penalty
                optional: 'True'
                path: C
              - default_value: '0.1'
                description: Epsilon in the epsilon-SVR model. It specifies the epsilon-tube
                  within which no penalty is associated in the training loss function
                  with points predicted within a distance epsilon from the actual value.
                kind_of_value: float
                name: epsilon
                optional: 'True'
                path: epsilon
              - default_value: '''rbf'''
                description: Specifies the kernel type to be used in the algorithm.
                kind_of_value: '{''linear'', ''poly'', ''rbf'', ''sigmoid'', ''precomputed'',
                a callable in shape (n_samples, n_samples)}'
                name: kernel
                optional: 'True'
                path: kernel
              - default_value: '3'
                description: 'Degree of the polynomial kernel function (''poly''). '
                kind_of_value: integer
                name: poly_degree
                optional: 'True'
                path: degree
              - default_value: '''auto'''
                description: Kernel coefficient for 'rbf', 'poly' and 'sigmoid'. If
                  kernel_coefficient is 'auto' then 1/n_features will be used instead.
                kind_of_value: float or 'auto'
                name: kernel_coefficient
                optional: 'True'
                path: gamma
              - default_value: '0.0'
                description: Independent term in kernel function. It is only significant
                  in 'poly' and 'sigmoid'.
                kind_of_value: float
                name: independent_kernel_term
                optional: 'True'
                path: coef0
              - default_value: 'True'
                description: Whether to use the shrinking heuristic.
                kind_of_value: boolean
                name: shrinking
                optional: 'True'
                path: shrinking
              - default_value: '0.001'
                description: Tolerance for stopping criterion.
                kind_of_value: float
                name: tolerance
                optional: 'True'
                path: tol
              - default_value: 'False'
                description: Enable verbose output.
                kind_of_value: boolean
                name: verbose
                optional: 'False'
                path: verbose
            optimisation_parameters:
              - default_value: '200'
                description: Specify the size of the kernel cache (in MB).
                kind_of_value: float
                name: cache_size
                optional: 'True'
                path: cache_size
              - default_value: '-1'
                description: Hard limit on iterations within solver, or -1 for no limit.
                kind_of_value: integer
                name: max_iterations
                optional: 'True'
                path: max_iter
    !!python/pPath 'tree.tree.DecisionTreeClassifier':
      ;default_model: null
      data:
        estimator:
          description: ''
          name: decision tree classifier
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '''gini'''
                description: The function to measure the quality of a split.
                kind_of_value: '{''gini'', ''entropy''}'
                name: split_quality
                optional: 'True'
                path: criterion
              - default_value: '''best'''
                description: The strategy used to choose the split at each node.
                kind_of_value: '{''best'', ''random''}'
                name: splitting_strategy
                optional: 'True'
                path: splitter
              - default_value: None
                description: The maximum depth of the tree.
                kind_of_value: integer
                name: max_depth_tree
                optional: 'True'
                path: max_depth
              - default_value: '2'
                description: The minimum number of samples required to split an internal
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_split
                optional: 'True'
                path: min_samples_split
              - default_value: '1'
                description: The minimum number of samples required to be at a leaf
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_leaf
                optional: 'True'
                path: min_samples_leaf
              - default_value: '1'
                description: The minimum weighted fraction of the sum total of weights
                  (of all the input samples) required to be at a leaf node.
                kind_of_value: float
                name: min_weight_fraction_leaf
                optional: 'True'
                path: min_weight_fraction_leaf
              - default_value: None
                description: The number of features to consider when looking for the
                  best split.
                kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
                name: max_features
                optional: 'True'
                path: max_features
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: None
                description: Grow a tree with max_leaf_nodes in best-first fashion.
                kind_of_value: integer
                name: max_leaf_nodes
                optional: 'True'
                path: max_leaf_nodes
              - default_value: '0'
                description: A node will be split if this split induces a decrease of
                  the impurity greater than or equal to this value.
                kind_of_value: float
                name: min_impurity_decrease
                optional: 'True'
                path: min_impurity_decrease
              - default_value: None
                description: Weights associated with classes.
                kind_of_value: '{dict, list of dicts, ''balanced'', None}'
                name: class_weight
                optional: 'False'
                path: class_weight
            optimisation_parameters:
              - default_value: '''auto'''
                description: Whether to presort the data to speed up the finding of
                  best splits in fitting.
                kind_of_value: '{boolean, ''auto''}'
                name: presort
                optional: 'True'
                path: presort
    :tree.tree.DecisionTreeRegressor:
      ;default_model: null
      data:
        estimator:
          description: ''
          name: decision tree regressor
          other_names: []
          parameters:
            execution_parameters: []
            model_parameters:
              - default_value: '''mse'''
                description: The function to measure the quality of a split.
                kind_of_value: '{''mse'', ''friedman_mse'', ''mae''}'
                name: split_quality
                optional: 'True'
                path: criterion
              - default_value: '''best'''
                description: The strategy used to choose the split at each node.
                kind_of_value: '{''best'', ''random''}'
                name: splitting_strategy
                optional: 'True'
                path: splitter
              - default_value: None
                description: The maximum depth of the tree.
                kind_of_value: integer
                name: max_depth_tree
                optional: 'True'
                path: max_depth
              - default_value: '2'
                description: The minimum number of samples required to split an internal
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_split
                optional: 'True'
                path: min_samples_split
              - default_value: '1'
                description: The minimum number of samples required to be at a leaf
                  node.
                kind_of_value: '{integer, float}'
                name: min_samples_leaf
                optional: 'True'
                path: min_samples_leaf
              - default_value: '1'
                description: The minimum weighted fraction of the sum total of weights
                  (of all the input samples) required to be at a leaf node.
                kind_of_value: float
                name: min_weight_fraction_leaf
                optional: 'True'
                path: min_weight_fraction_leaf
              - default_value: None
                description: The number of features to consider when looking for the
                  best split.
                kind_of_value: '{integer, float, ''auto'', ''sqrt'', ''log2'', None}'
                name: max_features
                optional: 'True'
                path: max_features
              - default_value: None
                description: The seed of the pseudo random number generator to use when
                  shuffling the data. If int, random_state is the seed used by the random
                  number generator; If RandomState instance, random_state is the random
                  number generator; If None, the random number generator is the RandomState
                  instance used by np.random.
                kind_of_value: '{integer, RandomState instance, None}'
                name: random_state
                optional: 'True'
                path: random_state
              - default_value: None
                description: Grow a tree with max_leaf_nodes in best-first fashion.
                kind_of_value: integer
                name: max_leaf_nodes
                optional: 'True'
                path: max_leaf_nodes
              - default_value: '0'
                description: A node will be split if this split induces a decrease of
                  the impurity greater than or equal to this value.
                kind_of_value: float
                name: min_impurity_decrease
                optional: 'True'
                path: min_impurity_decrease
            optimisation_parameters:
              - default_value: 'False'
                description: Whether to presort the data to speed up the finding of
                  best splits in fitting.
                kind_of_value: boolean
                name: presort
                optional: 'True'
                path: presort
metadata:
  author: "Thomas Weißgerber"
  library:
    name: sklearn
    version: '>= 0.19.1'
  version: 0.1.0
